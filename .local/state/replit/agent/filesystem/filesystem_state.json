{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nTSR Planner is a mobile-first team task management application designed for small teams to efficiently track work items and maintain meeting records. The application centers around teams as the primary organizational unit, where each team can create and manage tasks, record meeting minutes, and track progress over time. The system emphasizes fast access and real-time collaboration while maintaining a clear audit trail of all task changes through automatically generated meeting minutes.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built as a single-page application using React with TypeScript. The frontend follows a component-based architecture with:\n\n- **Routing**: Wouter for lightweight client-side routing\n- **State Management**: React Context for authentication and team selection, with React Query for server state management\n- **UI Framework**: Radix UI components with Tailwind CSS for styling, following the shadcn/ui design system\n- **Form Handling**: React Hook Form with Zod validation for type-safe form management\n- **Mobile-First Design**: Responsive layout optimized for mobile devices with bottom navigation\n\n## Backend Architecture\nThe server implements a REST API using Express.js with TypeScript:\n\n- **API Structure**: RESTful endpoints organized by resource type (users, teams, tasks, minutes)\n- **Data Layer**: In-memory storage interface with plans for PostgreSQL integration via Drizzle ORM\n- **Authentication**: Firebase Authentication integration for user management\n- **Request Handling**: Express middleware for logging, JSON parsing, and error handling\n\n## Database Design\nThe application uses Drizzle ORM with a PostgreSQL database featuring:\n\n- **Users**: Store user profiles with admin flags and authentication data\n- **Teams**: Primary organizational unit with default venues and member relationships\n- **Team Members**: Junction table managing user-team relationships with coordinator roles\n- **Tasks**: Work items with status tracking, priority levels, and member assignments\n- **Minutes**: Meeting records tied to specific teams and dates\n- **Snapshots**: Audit trail capturing task changes with timestamps and change types\n\n## Authentication & Authorization\nRole-based access control with four distinct permission levels:\n\n- **Superadmin**: Immutable administrative account with full system access\n- **Admin**: Full read/write access across all teams and user management capabilities\n- **Coordinator**: Can manage tasks and minutes for their assigned teams\n- **Member**: Read access to their teams with limited edit permissions on assigned tasks\n\n## Key Design Patterns\n- **Team-Scoped Data**: All primary entities belong to specific teams for data isolation\n- **Audit Trail**: Automatic snapshot generation for task changes to maintain accountability\n- **Mobile Optimization**: Bottom navigation and touch-friendly interface design\n- **Real-Time Updates**: React Query for automatic data synchronization and optimistic updates\n\n# External Dependencies\n\n## Authentication Services\n- **Firebase Authentication**: Handles user sign-in/sign-out with Google OAuth integration\n- **Firebase SDK**: Client-side authentication state management\n\n## Database & ORM\n- **Neon Database**: PostgreSQL hosting service (@neondatabase/serverless)\n- **Drizzle ORM**: Type-safe database operations and migrations\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n## UI & Styling\n- **Radix UI**: Headless component primitives for accessibility\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library for consistent iconography\n- **shadcn/ui**: Pre-built component system based on Radix UI\n\n## Development Tools\n- **Vite**: Frontend build tool and development server\n- **TypeScript**: Type safety across frontend and backend\n- **React Query**: Server state management and caching\n- **React Hook Form**: Form state management with validation\n- **Zod**: Runtime type validation and schema definition\n\n## Build & Deployment\n- **esbuild**: Server-side bundling for production\n- **Replit Integration**: Development environment with error handling and cartographer support","size_bytes":4236},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2755},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/TSR Planner_1757592237023.md":{"content":"# TSR Planner — Detailed Product Specification\n\nDate: 2025-09-03\nVersion: 3.0 (recreated)\nOwner: Core product team\nStatus: Active\n\nPurpose: Provide a single, clear source of truth for product scope, behaviors, roles, and data semantics. This is a product specification (not an implementation guide) with enough precision to design, build, and test the app end-to-end.\n\n---\n\n## 1) Overview\n\nTSR Planner is a lightweight, mobile‑first workspace for small teams to:\n- Capture meeting context (date, venue) and attendance.\n- Create, view, and update team tasks in real time.\n- Automatically record a dated history of task changes (minutes) for accountability.\n\nCentral concept: Team. Every task and minutes record belongs to exactly one team and a specific date.\n\nGoals\n- Fast: seconds to first edit on mobile.\n- Focused: everything is team‑scoped by default.\n- Traceable: discoverable, dated minutes linked to task changes.\n\nNon‑Goals\n- Deep project/program management (epics, sprints, Gantt, etc.).\n- Enterprise multi‑tenant governance.\n- Notifications/reminders/escalations (future consideration).\n\n---\n\n## 2) Personas & Roles\n\n- Superadmin: Fixed account (asif.shakir@gmail.com). Full administrative capabilities, cannot be demoted.\n- Admin: Full read/write across all teams. Manages teams, memberships, and user Admin flags.\n- Coordinator: Can create/update tasks and minutes for teams they coordinate. Cannot manage teams/memberships or user Admin flags.\n- Member: Reads their teams. May edit Status and Notes only on tasks where they are responsible.\n\nHigh‑level Permissions\n- Read: Members (their teams), Coordinators (their teams), Admins/Superadmin (all teams).\n- Write tasks/minutes: Coordinators (their teams), Admins/Superadmin (all teams). Members: Status and Notes on their assigned tasks only.\n- Manage teams/memberships & user Admin flags: Admins/Superadmin only (superadmin immutable).\n\n---\n\n## 3) Core Concepts\n\n- Team: Primary grouping; owns tasks and dated minutes.\n- Task: Unit of work with fields defined below; exactly one responsible team and one responsible member (may be Unassigned until set).\n- Minutes (by Date): For a team+date, the immutable list of task snapshots (Added/Edited/Deleted), plus attendance and venue.\n- Attendance: Presence list of team members for a team+date.\n- Snapshot: Full capture of a task when it changes, labeled Added/Edited/Deleted.\n\nAppendix A lists initial/seed teams and specific membership where relevant.\n\n---\n\n## 4) Functional Requirements\n\n### 4.1 Auth & Session\n- Google sign‑in required to access the app.\n- After auth, the app resolves role(s) from the Users collection.\n- Superadmin is recognized by exact email match and is immutable.\n\n### 4.2 App Shell & Navigation\n- Header: App title, user avatar (opens Profile/Logout), persistent Team selector.\n- Tabs: Tasks, Notes, Teams (admin only), Users (admin only), Profile.\n- Tasks and Notes require a selected team. Profile/Teams/Users do not.\n- Navigating away does not clear the selected team; returning reuses it.\n\n### 4.3 Team Context & Date Card\n- Selecting a team updates Tasks and Notes context immediately.\n- Tasks screen shows a Date Card for the current team+date displaying Date, Venue, and Present/Total.\n- Clicking the Date Card opens a modal to set Date, Venue, and attendance (per‑member toggles plus Select All). Save updates the card immediately.\n\n### 4.4 Tasks\n- Visible List: Open tasks only.\n  - For Admins/Superadmin/Coordinators: shows all open tasks for the selected team, newest updated first.\n  - For Members: shows only open tasks where they are the responsible member.\n- Add Task: FAB opens modal (Admin/Superadmin/Coordinators only). Title required; defaults apply.\n- Task Modal: Shows all fields; respects permissions.\n- Inline Editing: Allowed per field and permission. Autosave behavior below.\n- Member Editing Limits: Members can change only Status and Notes on tasks they own.\n- Live Search: Case‑insensitive, 200ms debounce. OR logic across title, notes, responsible member name, and any team member name (to see that member’s tasks if responsible).\n- Closing Behavior: Changing Status from open→closed removes the task from the open list and records an Edited snapshot for the current date.\n\n### 4.5 Notes (Minutes)\n- Date List: Reverse‑chronological list of dates with snapshots for the selected team.\n- Detail View: Read‑only cards for each snapshot labeled Added/Edited/Deleted. Deleted snapshots show prior task info in a subdued style. Edited cards may highlight changed fields.\n- Live Search: Filters the date list and, within a selected date, filters snapshot cards (OR across title, notes, change label, responsible member name).\n\n### 4.6 Users (Admin)\n- User List: Name (if available), Email, Role badges (Member, Coordinator, Admin, Superadmin).\n- Admin Toggle: For any non‑superadmin user, Admins can toggle Admin on/off. Updates immediately with a toast. Superadmin toggle disabled.\n- Coordinator Summary: Shows count of teams a user coordinates; click reveals a read‑only popover list.\n- Search & Sort: Search across name/email/role; default sort Admin desc, then Name asc; columns sortable.\n- No destructive actions; team membership changes happen on Teams.\n\n### 4.7 Teams (Admin)\n- Team List: Name plus counts (members, coordinators).\n- Team Detail: Members list (coordinator indicator), default venue, promote/demote coordinator actions, add member control (email). Autosaves per field.\n- Guard: Demoting the last remaining coordinator is blocked.\n- Add Team: FAB opens modal to create a team (name, default venue, initial members, initial coordinators).\n- Search: Case‑insensitive across team name and member/coordinator names. Optional in‑team filter for members.\n\n### 4.8 Profile\n- Shows user info and role. If admin, shows admin‑specific links. No team required.\n\n---\n\n## 5) Data Model (Conceptual)\n\n### 5.1 Entities\n\nUser\n- id, email, displayName?, photoUrl?\n- isAdmin: boolean (derived or stored)\n- isSuperadmin: boolean (derived from email match)\n\nTeam\n- id, name (unique), defaultVenue?\n\nTeamMember\n- id, teamId → Team, userId → User, isCoordinator: boolean\n\nTask\n- id, teamId → Team, responsibleMemberId? → TeamMember\n- title (1–120), notes?, status (Open | In‑Progress | Blocked | Done | Canceled), priority (Low | Medium | High)\n- dueDate?\n- createdAt, updatedAt\n\nMinutes (by Team+Date)\n- id, teamId → Team, date (yyyy‑mm‑dd), venue?, attendance: [TeamMemberId]\n\nSnapshot\n- id, minutesId → Minutes, taskId → Task (for reference), changeType (Added | Edited | Deleted)\n- recordedAt (when snapshot saved), taskUpdatedAt (the task’s updatedAt at that time)\n- payload: Full copy of task fields at change time (title, notes, status, priority, dueDate, teamId, responsibleMemberId, createdAt, updatedAt)\n\n### 5.2 Field Rules\n- Title required; all other fields optional unless noted.\n- Responsible Team required; Responsible Member must be a member of that team. May be Unassigned until set; must be set before closing a task (Done/Canceled).\n- Created/Updated timestamps set automatically; any saved change updates updatedAt.\n- Snapshots are immutable records; multiple snapshots can exist for a task in a single date.\n\n---\n\n## 6) Business Rules\n\n- One team per task; cross‑team task moves are not supported in this version.\n- Open task list shows only Open/In‑Progress/Blocked. Done/Canceled are closed and hidden from Tasks; remain in history via snapshots.\n- Each saved change to a task creates an Edited snapshot in the current team+date minutes.\n- Deletion (if exposed) creates a Deleted snapshot and removes the task from active lists (no recovery in scope).\n- Attendance/venue update reflects immediately on the Date Card.\n- Removing a member who owns tasks sets those tasks to Unassigned and flags for reassignment.\n- Team deletion is not allowed if tasks or minutes exist (delete flow out of scope).\n- Guard last coordinator: At least one coordinator must remain per team.\n\n---\n\n## 7) Permission Model (Detailed)\n\n- Superadmin: Global admin, immutable. Toggle hidden/disabled in Users.\n- Admin: Full read/write on all teams; can manage teams, memberships, and user Admin flags.\n- Coordinator: Read/write tasks and minutes for their teams only; cannot manage teams/memberships or user Admin flags.\n- Member: Reads their teams; limited write to Status and Notes on tasks where they are responsible.\n\nEdge Cases\n- Attempted restricted edits are ignored visually and produce a subtle “insufficient permission” toast.\n- Demoting last coordinator is blocked with a clear message.\n\n---\n\n## 8) UX Principles & Behaviors\n\nAutosave\n- Non‑text fields save immediately on change.\n- Text inputs/notes save on blur.\n- Toast confirmations are debounced (~1s) and consolidate rapid saves.\n\nSearch\n- Case‑insensitive, diacritics‑insensitive, ignores punctuation.\n- OR across relevant fields for each context (Tasks: title/notes/responsible member; Notes: title/notes/change label/responsible member; Users/Teams as described).\n- Debounce ~200ms; does not shift selection or scroll. Clearing restores full list.\n\nInteraction\n- FAB for creation (tasks, teams); modals close on successful submit with confirmation toast.\n- Read‑only snapshot cards in Notes; never open edit modals.\n\nMobile‑first\n- Primary flows optimized for small screens: minimal taps, clear labels, forgiving inputs.\n\nAccessibility\n- Keyboard navigable, ARIA where appropriate, color contrast AA.\n\n---\n\n## 9) Non‑Functional Requirements\n\n- Performance: First interactive ≤ 2s on modern mobile; search/filter < 100ms after debounce.\n- Reliability: No data loss on autosave; optimistic UI reconciles conflicts sensibly.\n- Security: Firebase auth; role checks server‑side in data access; superadmin immutable.\n- Privacy: Emails visible to admins and members within shared teams; no public data exposure.\n\n---\n\n## 10) Analytics & Success Indicators\n\n- Adoption: % meetings with minutes created per team.\n- Engagement: In‑meeting task update ratio; median time to first edit.\n- Data Quality: Attendance completeness; task freshness (days since last update for open tasks).\n\n---\n\n## 11) Roadmap & Open Questions\n\nNear Term\n- Live attendance count UI; filtered assignee list; per‑task activity panel; Users screen (admin flag management) if not yet shipped.\n\nMid / Long Term\n- Scalable data store; digest/summary exports; finer role options; cross‑team task moves.\n\nOpen Questions\n- Default team on task creation when no team is selected?\n- Need a viewer‑only role distinct from Member?\n- Richer categorization (labels/tags)?\n\n---\n\n## 12) Risks & Mitigations\n\n- Scope creep into project management → keep strict non‑goals; small iterations.\n- Minute noise from trivial edits → debounce toasts; consider grouping snapshot display later.\n- Attendance incompleteness → make Date Card prominent; keep modal quick and forgiving.\n\n---\n\n## 13) Tech Stack & Architecture Notes\n\nFrontend\n- Next.js with React Server Components (RSC). Server‑first; minimal client JS.\n\nDatabase & ORM\n- SQLite for simplicity; Prisma for type‑safe schema and access.\n\nPackage Management\n- pnpm.\n\nUI Components\n- shadcn/ui on Radix UI primitives.\n\nArchitecture Notes\n- No traditional API routes; data fetched in RSC. SQLite co‑located with the app.\n\n---\n\n## 14) Acceptance Criteria (High‑Level)\n\nTasks\n- Create task with Title only; defaults apply (Status Open, Priority Medium, Responsible Team = selected team, Responsible Member = Unassigned).\n- Coordinators/Admin/Superadmin can edit all fields; Members only Status and Notes on their assigned tasks.\n- Changing open→closed removes from Tasks and writes an Edited snapshot for the current date.\n- Live search filters visible tasks by title/notes/responsible member in real time.\n\nNotes\n- Selecting a date shows all snapshots for that team+date labeled Added/Edited/Deleted.\n- Deleted snapshots render subdued; cards are read‑only.\n- Live search filters both date list and snapshot cards within a date.\n\nTeams (Admin)\n- Create team; set default venue; manage membership and coordinator flags.\n- Block demoting the last remaining coordinator with a clear message.\n\nUsers (Admin)\n- Toggle Admin on any non‑superadmin user; immediate update with toast.\n- Superadmin always displays as Admin with disabled toggle.\n\nAttendance & Venue\n- Date Card shows Date, Venue, Present/Total. Modal supports Select All and per‑member toggles; changes reflect on close.\n\nAuth & Roles\n- Google sign‑in gates access; UI shows only permitted tabs/actions by role.\n\n---\n\n## 15) Glossary\n\n- Minutes: Dated record for a team including attendance/venue and task change snapshots accrued that date.\n- Snapshot: Immutable capture of a task at change time, labeled Added/Edited/Deleted.\n- Open Task: Status ∈ {Open, In‑Progress, Blocked}; appears on Tasks.\n- Closed Task: Status ∈ {Done, Canceled}; hidden from Tasks, visible only in snapshots.\n- Responsible Team/Member: Owning team and the single accountable member within that team.\n\n---\n\n## 16) Appendix A — Seed Teams & Membership\n\nTeams\n- Creative, CC, NCF, SS, Research, Marketing, Gems, Tech, Finance, Gifts, HR, Strategy, Coordinators\n\nStrategy Team\n- Members: asif.shakir@gmail.com, abbas.naheed@gmail.com\n- Coordinator: abbas.naheed@gmail.com\n\n---\n\n## 17) Change Log\n\n- v3.0 (2025‑09‑03) — Recreated, consolidated spec with structured sections, clarified roles, data semantics, snapshots, acceptance criteria, and glossary.\n- v2.1 — Expanded product spec with Users screen, task fields, snapshot semantics, permission edge cases, and search behavior details.\n- v2.0 — Refocused product specification with clarified roles and minutes snapshots.\n- v1.0 — Original combined product + technical specification.\n\n","size_bytes":13824},"attached_assets/TSR Planner_1757592411372.md":{"content":"# TSR Planner — Detailed Product Specification\n\nDate: 2025-09-03\nVersion: 3.0 (recreated)\nOwner: Core product team\nStatus: Active\n\nPurpose: Provide a single, clear source of truth for product scope, behaviors, roles, and data semantics. This is a product specification (not an implementation guide) with enough precision to design, build, and test the app end-to-end.\n\n---\n\n## 1) Overview\n\nTSR Planner is a lightweight, mobile‑first workspace for small teams to:\n- Capture meeting context (date, venue) and attendance.\n- Create, view, and update team tasks in real time.\n- Automatically record a dated history of task changes (minutes) for accountability.\n\nCentral concept: Team. Every task and minutes record belongs to exactly one team and a specific date.\n\nGoals\n- Fast: seconds to first edit on mobile.\n- Focused: everything is team‑scoped by default.\n- Traceable: discoverable, dated minutes linked to task changes.\n\nNon‑Goals\n- Deep project/program management (epics, sprints, Gantt, etc.).\n- Enterprise multi‑tenant governance.\n- Notifications/reminders/escalations (future consideration).\n\n---\n\n## 2) Personas & Roles\n\n- Superadmin: Fixed account (asif.shakir@gmail.com). Full administrative capabilities, cannot be demoted.\n- Admin: Full read/write across all teams. Manages teams, memberships, and user Admin flags.\n- Coordinator: Can create/update tasks and minutes for teams they coordinate. Cannot manage teams/memberships or user Admin flags.\n- Member: Reads their teams. May edit Status and Notes only on tasks where they are responsible.\n\nHigh‑level Permissions\n- Read: Members (their teams), Coordinators (their teams), Admins/Superadmin (all teams).\n- Write tasks/minutes: Coordinators (their teams), Admins/Superadmin (all teams). Members: Status and Notes on their assigned tasks only.\n- Manage teams/memberships & user Admin flags: Admins/Superadmin only (superadmin immutable).\n\n---\n\n## 3) Core Concepts\n\n- Team: Primary grouping; owns tasks and dated minutes.\n- Task: Unit of work with fields defined below; exactly one responsible team and one responsible member (may be Unassigned until set).\n- Minutes (by Date): For a team+date, the immutable list of task snapshots (Added/Edited/Deleted), plus attendance and venue.\n- Attendance: Presence list of team members for a team+date.\n- Snapshot: Full capture of a task when it changes, labeled Added/Edited/Deleted.\n\nAppendix A lists initial/seed teams and specific membership where relevant.\n\n---\n\n## 4) Functional Requirements\n\n### 4.1 Auth & Session\n- Google sign‑in required to access the app.\n- After auth, the app resolves role(s) from the Users collection.\n- Superadmin is recognized by exact email match and is immutable.\n\n### 4.2 App Shell & Navigation\n- Header: App title, user avatar (opens Profile/Logout), persistent Team selector.\n- Tabs: Tasks, Notes, Teams (admin only), Users (admin only), Profile.\n- Tasks and Notes require a selected team. Profile/Teams/Users do not.\n- Navigating away does not clear the selected team; returning reuses it.\n\n### 4.3 Team Context & Date Card\n- Selecting a team updates Tasks and Notes context immediately.\n- Tasks screen shows a Date Card for the current team+date displaying Date, Venue, and Present/Total.\n- Clicking the Date Card opens a modal to set Date, Venue, and attendance (per‑member toggles plus Select All). Save updates the card immediately.\n\n### 4.4 Tasks\n- Visible List: Open tasks only.\n  - For Admins/Superadmin/Coordinators: shows all open tasks for the selected team, newest updated first.\n  - For Members: shows only open tasks where they are the responsible member.\n- Add Task: FAB opens modal (Admin/Superadmin/Coordinators only). Title required; defaults apply.\n- Task Modal: Shows all fields; respects permissions.\n- Inline Editing: Allowed per field and permission. Autosave behavior below.\n- Member Editing Limits: Members can change only Status and Notes on tasks they own.\n- Live Search: Case‑insensitive, 200ms debounce. OR logic across title, notes, responsible member name, and any team member name (to see that member’s tasks if responsible).\n- Closing Behavior: Changing Status from open→closed removes the task from the open list and records an Edited snapshot for the current date.\n\n### 4.5 Notes (Minutes)\n- Date List: Reverse‑chronological list of dates with snapshots for the selected team.\n- Detail View: Read‑only cards for each snapshot labeled Added/Edited/Deleted. Deleted snapshots show prior task info in a subdued style. Edited cards may highlight changed fields.\n- Live Search: Filters the date list and, within a selected date, filters snapshot cards (OR across title, notes, change label, responsible member name).\n\n### 4.6 Users (Admin)\n- User List: Name (if available), Email, Role badges (Member, Coordinator, Admin, Superadmin).\n- Admin Toggle: For any non‑superadmin user, Admins can toggle Admin on/off. Updates immediately with a toast. Superadmin toggle disabled.\n- Coordinator Summary: Shows count of teams a user coordinates; click reveals a read‑only popover list.\n- Search & Sort: Search across name/email/role; default sort Admin desc, then Name asc; columns sortable.\n- No destructive actions; team membership changes happen on Teams.\n\n### 4.7 Teams (Admin)\n- Team List: Name plus counts (members, coordinators).\n- Team Detail: Members list (coordinator indicator), default venue, promote/demote coordinator actions, add member control (email). Autosaves per field.\n- Guard: Demoting the last remaining coordinator is blocked.\n- Add Team: FAB opens modal to create a team (name, default venue, initial members, initial coordinators).\n- Search: Case‑insensitive across team name and member/coordinator names. Optional in‑team filter for members.\n\n### 4.8 Profile\n- Shows user info and role. If admin, shows admin‑specific links. No team required.\n\n---\n\n## 5) Data Model (Conceptual)\n\n### 5.1 Entities\n\nUser\n- id, email, displayName?, photoUrl?\n- isAdmin: boolean (derived or stored)\n- isSuperadmin: boolean (derived from email match)\n\nTeam\n- id, name (unique), defaultVenue?\n\nTeamMember\n- id, teamId → Team, userId → User, isCoordinator: boolean\n\nTask\n- id, teamId → Team, responsibleMemberId? → TeamMember\n- title (1–120), notes?, status (Open | In‑Progress | Blocked | Done | Canceled), priority (Low | Medium | High)\n- dueDate?\n- createdAt, updatedAt\n\nMinutes (by Team+Date)\n- id, teamId → Team, date (yyyy‑mm‑dd), venue?, attendance: [TeamMemberId]\n\nSnapshot\n- id, minutesId → Minutes, taskId → Task (for reference), changeType (Added | Edited | Deleted)\n- recordedAt (when snapshot saved), taskUpdatedAt (the task’s updatedAt at that time)\n- payload: Full copy of task fields at change time (title, notes, status, priority, dueDate, teamId, responsibleMemberId, createdAt, updatedAt)\n\n### 5.2 Field Rules\n- Title required; all other fields optional unless noted.\n- Responsible Team required; Responsible Member must be a member of that team. May be Unassigned until set; must be set before closing a task (Done/Canceled).\n- Created/Updated timestamps set automatically; any saved change updates updatedAt.\n- Snapshots are immutable records; multiple snapshots can exist for a task in a single date.\n\n---\n\n## 6) Business Rules\n\n- One team per task; cross‑team task moves are not supported in this version.\n- Open task list shows only Open/In‑Progress/Blocked. Done/Canceled are closed and hidden from Tasks; remain in history via snapshots.\n- Each saved change to a task creates an Edited snapshot in the current team+date minutes.\n- Deletion (if exposed) creates a Deleted snapshot and removes the task from active lists (no recovery in scope).\n- Attendance/venue update reflects immediately on the Date Card.\n- Removing a member who owns tasks sets those tasks to Unassigned and flags for reassignment.\n- Team deletion is not allowed if tasks or minutes exist (delete flow out of scope).\n- Guard last coordinator: At least one coordinator must remain per team.\n\n---\n\n## 7) Permission Model (Detailed)\n\n- Superadmin: Global admin, immutable. Toggle hidden/disabled in Users.\n- Admin: Full read/write on all teams; can manage teams, memberships, and user Admin flags.\n- Coordinator: Read/write tasks and minutes for their teams only; cannot manage teams/memberships or user Admin flags.\n- Member: Reads their teams; limited write to Status and Notes on tasks where they are responsible.\n\nEdge Cases\n- Attempted restricted edits are ignored visually and produce a subtle “insufficient permission” toast.\n- Demoting last coordinator is blocked with a clear message.\n\n---\n\n## 8) UX Principles & Behaviors\n\nAutosave\n- Non‑text fields save immediately on change.\n- Text inputs/notes save on blur.\n- Toast confirmations are debounced (~1s) and consolidate rapid saves.\n\nSearch\n- Case‑insensitive, diacritics‑insensitive, ignores punctuation.\n- OR across relevant fields for each context (Tasks: title/notes/responsible member; Notes: title/notes/change label/responsible member; Users/Teams as described).\n- Debounce ~200ms; does not shift selection or scroll. Clearing restores full list.\n\nInteraction\n- FAB for creation (tasks, teams); modals close on successful submit with confirmation toast.\n- Read‑only snapshot cards in Notes; never open edit modals.\n\nMobile‑first\n- Primary flows optimized for small screens: minimal taps, clear labels, forgiving inputs.\n\nAccessibility\n- Keyboard navigable, ARIA where appropriate, color contrast AA.\n\n---\n\n## 9) Non‑Functional Requirements\n\n- Performance: First interactive ≤ 2s on modern mobile; search/filter < 100ms after debounce.\n- Reliability: No data loss on autosave; optimistic UI reconciles conflicts sensibly.\n- Security: Firebase auth; role checks server‑side in data access; superadmin immutable.\n- Privacy: Emails visible to admins and members within shared teams; no public data exposure.\n\n---\n\n## 10) Analytics & Success Indicators\n\n- Adoption: % meetings with minutes created per team.\n- Engagement: In‑meeting task update ratio; median time to first edit.\n- Data Quality: Attendance completeness; task freshness (days since last update for open tasks).\n\n---\n\n## 11) Roadmap & Open Questions\n\nNear Term\n- Live attendance count UI; filtered assignee list; per‑task activity panel; Users screen (admin flag management) if not yet shipped.\n\nMid / Long Term\n- Scalable data store; digest/summary exports; finer role options; cross‑team task moves.\n\nOpen Questions\n- Default team on task creation when no team is selected?\n- Need a viewer‑only role distinct from Member?\n- Richer categorization (labels/tags)?\n\n---\n\n## 12) Risks & Mitigations\n\n- Scope creep into project management → keep strict non‑goals; small iterations.\n- Minute noise from trivial edits → debounce toasts; consider grouping snapshot display later.\n- Attendance incompleteness → make Date Card prominent; keep modal quick and forgiving.\n\n---\n\n## 13) Tech Stack & Architecture Notes\n\nFrontend\n- Next.js with React Server Components (RSC). Server‑first; minimal client JS.\n\nDatabase & ORM\n- SQLite for simplicity; Prisma for type‑safe schema and access.\n\nPackage Management\n- pnpm.\n\nUI Components\n- shadcn/ui on Radix UI primitives.\n\nArchitecture Notes\n- No traditional API routes; data fetched in RSC. SQLite co‑located with the app.\n\n---\n\n## 14) Acceptance Criteria (High‑Level)\n\nTasks\n- Create task with Title only; defaults apply (Status Open, Priority Medium, Responsible Team = selected team, Responsible Member = Unassigned).\n- Coordinators/Admin/Superadmin can edit all fields; Members only Status and Notes on their assigned tasks.\n- Changing open→closed removes from Tasks and writes an Edited snapshot for the current date.\n- Live search filters visible tasks by title/notes/responsible member in real time.\n\nNotes\n- Selecting a date shows all snapshots for that team+date labeled Added/Edited/Deleted.\n- Deleted snapshots render subdued; cards are read‑only.\n- Live search filters both date list and snapshot cards within a date.\n\nTeams (Admin)\n- Create team; set default venue; manage membership and coordinator flags.\n- Block demoting the last remaining coordinator with a clear message.\n\nUsers (Admin)\n- Toggle Admin on any non‑superadmin user; immediate update with toast.\n- Superadmin always displays as Admin with disabled toggle.\n\nAttendance & Venue\n- Date Card shows Date, Venue, Present/Total. Modal supports Select All and per‑member toggles; changes reflect on close.\n\nAuth & Roles\n- Google sign‑in gates access; UI shows only permitted tabs/actions by role.\n\n---\n\n## 15) Glossary\n\n- Minutes: Dated record for a team including attendance/venue and task change snapshots accrued that date.\n- Snapshot: Immutable capture of a task at change time, labeled Added/Edited/Deleted.\n- Open Task: Status ∈ {Open, In‑Progress, Blocked}; appears on Tasks.\n- Closed Task: Status ∈ {Done, Canceled}; hidden from Tasks, visible only in snapshots.\n- Responsible Team/Member: Owning team and the single accountable member within that team.\n\n---\n\n## 16) Appendix A — Seed Teams & Membership\n\nTeams\n- Creative, CC, NCF, SS, Research, Marketing, Gems, Tech, Finance, Gifts, HR, Strategy, Coordinators\n\nStrategy Team\n- Members: asif.shakir@gmail.com, abbas.naheed@gmail.com\n- Coordinator: abbas.naheed@gmail.com\n\n---\n\n## 17) Change Log\n\n- v3.0 (2025‑09‑03) — Recreated, consolidated spec with structured sections, clarified roles, data semantics, snapshots, acceptance criteria, and glossary.\n- v2.1 — Expanded product spec with Users screen, task fields, snapshot semantics, permission edge cases, and search behavior details.\n- v2.0 — Refocused product specification with clarified roles and minutes snapshots.\n- v1.0 — Original combined product + technical specification.\n\n","size_bytes":13824},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { \n  insertUserSchema, insertTeamSchema, insertTeamMemberSchema, \n  insertTaskSchema, insertMinutesSchema, TaskStatus \n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth routes\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, displayName, photoUrl } = req.body;\n      \n      let user = await storage.getUserByEmail(email);\n      if (!user) {\n        user = await storage.createUser({\n          email,\n          displayName,\n          photoUrl,\n          isAdmin: false,\n        });\n      }\n      \n      const role = await storage.getUserRole(user.id);\n      res.json({ user, role });\n    } catch (error) {\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  // User routes\n  app.get(\"/api/users\", async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      const usersWithRoles = await Promise.all(\n        users.map(async (user) => ({\n          ...user,\n          role: await storage.getUserRole(user.id),\n        }))\n      );\n      res.json(usersWithRoles);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/users/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== \"string\") {\n        return res.status(400).json({ message: \"Query parameter required\" });\n      }\n      \n      const users = await storage.searchUsers(q);\n      res.json(users);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  app.patch(\"/api/users/:id/admin\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isAdmin } = req.body;\n      \n      const user = await storage.updateUser(id, { isAdmin });\n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update admin status\" });\n    }\n  });\n\n  // Team routes\n  app.get(\"/api/teams\", async (req, res) => {\n    try {\n      const teams = await storage.getAllTeamsWithMembers();\n      res.json(teams);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch teams\" });\n    }\n  });\n\n  app.get(\"/api/teams/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== \"string\") {\n        return res.status(400).json({ message: \"Query parameter required\" });\n      }\n      \n      const teams = await storage.searchTeams(q);\n      res.json(teams);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  app.post(\"/api/teams\", async (req, res) => {\n    try {\n      const teamData = insertTeamSchema.parse(req.body);\n      const team = await storage.createTeam(teamData);\n      res.json(team);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid team data\" });\n    }\n  });\n\n  app.patch(\"/api/teams/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const team = await storage.updateTeam(id, updates);\n      res.json(team);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update team\" });\n    }\n  });\n\n  // Team member routes\n  app.post(\"/api/team-members\", async (req, res) => {\n    try {\n      const memberData = insertTeamMemberSchema.parse(req.body);\n      const member = await storage.createTeamMember(memberData);\n      res.json(member);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid member data\" });\n    }\n  });\n\n  app.patch(\"/api/team-members/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const member = await storage.updateTeamMember(id, updates);\n      res.json(member);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update member\" });\n    }\n  });\n\n  app.delete(\"/api/team-members/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTeamMember(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete member\" });\n    }\n  });\n\n  // Task routes\n  app.get(\"/api/tasks\", async (req, res) => {\n    try {\n      const { teamId, memberId } = req.query;\n      \n      let tasks;\n      if (memberId && typeof memberId === \"string\") {\n        tasks = await storage.getTasksByResponsibleMember(memberId);\n      } else if (teamId && typeof teamId === \"string\") {\n        tasks = await storage.getTasksByTeam(teamId);\n      } else {\n        return res.status(400).json({ message: \"teamId or memberId required\" });\n      }\n      \n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch tasks\" });\n    }\n  });\n\n  app.get(\"/api/tasks/search\", async (req, res) => {\n    try {\n      const { q, teamId } = req.query;\n      if (!q || typeof q !== \"string\") {\n        return res.status(400).json({ message: \"Query parameter required\" });\n      }\n      \n      const tasks = await storage.searchTasks(q, typeof teamId === \"string\" ? teamId : undefined);\n      res.json(tasks);\n    } catch (error) {\n      res.status(500).json({ message: \"Search failed\" });\n    }\n  });\n\n  app.post(\"/api/tasks\", async (req, res) => {\n    try {\n      const taskData = insertTaskSchema.parse(req.body);\n      const task = await storage.createTask(taskData);\n      res.json(task);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid task data\" });\n    }\n  });\n\n  app.patch(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const task = await storage.updateTask(id, updates);\n      res.json(task);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  app.delete(\"/api/tasks/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteTask(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Minutes routes\n  app.get(\"/api/minutes\", async (req, res) => {\n    try {\n      const { teamId } = req.query;\n      if (!teamId || typeof teamId !== \"string\") {\n        return res.status(400).json({ message: \"teamId required\" });\n      }\n      \n      const minutes = await storage.getMinutesByTeam(teamId);\n      res.json(minutes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch minutes\" });\n    }\n  });\n\n  app.post(\"/api/minutes\", async (req, res) => {\n    try {\n      const minutesData = insertMinutesSchema.parse(req.body);\n      const minutes = await storage.createMinutes(minutesData);\n      res.json(minutes);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid minutes data\" });\n    }\n  });\n\n  app.patch(\"/api/minutes/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updates = req.body;\n      \n      const minutes = await storage.updateMinutes(id, updates);\n      res.json(minutes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update minutes\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":7350},"server/storage.ts":{"content":"import { \n  type User, type InsertUser, type Team, type InsertTeam,\n  type TeamMember, type InsertTeamMember, type Task, type InsertTask,\n  type Minutes, type InsertMinutes, type Snapshot, type InsertSnapshot,\n  type TeamWithMembers, type TaskWithDetails, type MinutesWithSnapshots,\n  TaskStatus, ChangeType\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n\n  // Team operations\n  getTeam(id: string): Promise<Team | undefined>;\n  getTeamWithMembers(id: string): Promise<TeamWithMembers | undefined>;\n  getAllTeams(): Promise<Team[]>;\n  getAllTeamsWithMembers(): Promise<TeamWithMembers[]>;\n  createTeam(team: InsertTeam): Promise<Team>;\n  updateTeam(id: string, updates: Partial<Team>): Promise<Team>;\n\n  // Team member operations\n  getTeamMember(id: string): Promise<TeamMember | undefined>;\n  getTeamMembersByTeam(teamId: string): Promise<(TeamMember & { user: User })[]>;\n  getTeamMembersByUser(userId: string): Promise<(TeamMember & { team: Team })[]>;\n  createTeamMember(member: InsertTeamMember): Promise<TeamMember>;\n  updateTeamMember(id: string, updates: Partial<TeamMember>): Promise<TeamMember>;\n  deleteTeamMember(id: string): Promise<void>;\n\n  // Task operations\n  getTask(id: string): Promise<Task | undefined>;\n  getTaskWithDetails(id: string): Promise<TaskWithDetails | undefined>;\n  getTasksByTeam(teamId: string, includeCompleted?: boolean): Promise<TaskWithDetails[]>;\n  getTasksByResponsibleMember(memberId: string, includeCompleted?: boolean): Promise<TaskWithDetails[]>;\n  createTask(task: InsertTask): Promise<Task>;\n  updateTask(id: string, updates: Partial<Task>): Promise<Task>;\n  deleteTask(id: string): Promise<void>;\n\n  // Minutes operations\n  getMinutes(id: string): Promise<Minutes | undefined>;\n  getMinutesByTeamAndDate(teamId: string, date: string): Promise<Minutes | undefined>;\n  getMinutesByTeam(teamId: string): Promise<MinutesWithSnapshots[]>;\n  createMinutes(minutes: InsertMinutes): Promise<Minutes>;\n  updateMinutes(id: string, updates: Partial<Minutes>): Promise<Minutes>;\n\n  // Snapshot operations\n  createSnapshot(snapshot: InsertSnapshot): Promise<Snapshot>;\n  getSnapshotsByMinutes(minutesId: string): Promise<Snapshot[]>;\n\n  // Utility operations\n  getUserRole(userId: string): Promise<string>;\n  isUserCoordinatorOfTeam(userId: string, teamId: string): Promise<boolean>;\n  searchTasks(query: string, teamId?: string): Promise<TaskWithDetails[]>;\n  searchUsers(query: string): Promise<User[]>;\n  searchTeams(query: string): Promise<TeamWithMembers[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private teams: Map<string, Team> = new Map();\n  private teamMembers: Map<string, TeamMember> = new Map();\n  private tasks: Map<string, Task> = new Map();\n  private minutes: Map<string, Minutes> = new Map();\n  private snapshots: Map<string, Snapshot> = new Map();\n\n  constructor() {\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize superadmin\n    const superadminId = randomUUID();\n    const superadmin: User = {\n      id: superadminId,\n      email: \"asif.shakir@gmail.com\",\n      displayName: \"Asif Shakir\",\n      photoUrl: null,\n      isAdmin: true,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(superadminId, superadmin);\n\n    // Create initial teams\n    const teamNames = [\"Creative\", \"CC\", \"NCF\", \"SS\", \"Research\", \"Marketing\", \"Gems\", \"Tech\", \"Finance\", \"Gifts\", \"HR\", \"Strategy\", \"Coordinators\"];\n    teamNames.forEach(name => {\n      const team: Team = {\n        id: randomUUID(),\n        name,\n        defaultVenue: `${name} Meeting Room`,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      };\n      this.teams.set(team.id, team);\n    });\n\n    // Add Abbas to Strategy team\n    const abbassId = randomUUID();\n    const abbas: User = {\n      id: abbassId,\n      email: \"abbas.naheed@gmail.com\",\n      displayName: \"Abbas Naheed\",\n      photoUrl: null,\n      isAdmin: false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(abbassId, abbas);\n\n    const strategyTeam = Array.from(this.teams.values()).find(t => t.name === \"Strategy\");\n    if (strategyTeam) {\n      // Add superadmin as member\n      const superadminMember: TeamMember = {\n        id: randomUUID(),\n        teamId: strategyTeam.id,\n        userId: superadminId,\n        isCoordinator: false,\n        createdAt: new Date(),\n      };\n      this.teamMembers.set(superadminMember.id, superadminMember);\n\n      // Add Abbas as coordinator\n      const abbasMember: TeamMember = {\n        id: randomUUID(),\n        teamId: strategyTeam.id,\n        userId: abbassId,\n        isCoordinator: true,\n        createdAt: new Date(),\n      };\n      this.teamMembers.set(abbasMember.id, abbasMember);\n    }\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = {\n      ...insertUser,\n      id,\n      displayName: insertUser.displayName || null,\n      photoUrl: insertUser.photoUrl || null,\n      isAdmin: insertUser.isAdmin || false,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User> {\n    const user = this.users.get(id);\n    if (!user) throw new Error(\"User not found\");\n    \n    const updated = { ...user, ...updates, updatedAt: new Date() };\n    this.users.set(id, updated);\n    return updated;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return Array.from(this.users.values());\n  }\n\n  // Team operations\n  async getTeam(id: string): Promise<Team | undefined> {\n    return this.teams.get(id);\n  }\n\n  async getTeamWithMembers(id: string): Promise<TeamWithMembers | undefined> {\n    const team = this.teams.get(id);\n    if (!team) return undefined;\n\n    const teamMembers = Array.from(this.teamMembers.values())\n      .filter(tm => tm.teamId === id)\n      .map(tm => ({ ...tm, user: this.users.get(tm.userId)! }));\n\n    return {\n      ...team,\n      members: teamMembers,\n      coordinators: teamMembers.filter(tm => tm.isCoordinator),\n    };\n  }\n\n  async getAllTeams(): Promise<Team[]> {\n    return Array.from(this.teams.values());\n  }\n\n  async getAllTeamsWithMembers(): Promise<TeamWithMembers[]> {\n    const teams = await this.getAllTeams();\n    const result: TeamWithMembers[] = [];\n    \n    for (const team of teams) {\n      const withMembers = await this.getTeamWithMembers(team.id);\n      if (withMembers) result.push(withMembers);\n    }\n    \n    return result;\n  }\n\n  async createTeam(insertTeam: InsertTeam): Promise<Team> {\n    const id = randomUUID();\n    const team: Team = {\n      ...insertTeam,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.teams.set(id, team);\n    return team;\n  }\n\n  async updateTeam(id: string, updates: Partial<Team>): Promise<Team> {\n    const team = this.teams.get(id);\n    if (!team) throw new Error(\"Team not found\");\n    \n    const updated = { ...team, ...updates, updatedAt: new Date() };\n    this.teams.set(id, updated);\n    return updated;\n  }\n\n  // Team member operations\n  async getTeamMember(id: string): Promise<TeamMember | undefined> {\n    return this.teamMembers.get(id);\n  }\n\n  async getTeamMembersByTeam(teamId: string): Promise<(TeamMember & { user: User })[]> {\n    return Array.from(this.teamMembers.values())\n      .filter(tm => tm.teamId === teamId)\n      .map(tm => ({ ...tm, user: this.users.get(tm.userId)! }));\n  }\n\n  async getTeamMembersByUser(userId: string): Promise<(TeamMember & { team: Team })[]> {\n    return Array.from(this.teamMembers.values())\n      .filter(tm => tm.userId === userId)\n      .map(tm => ({ ...tm, team: this.teams.get(tm.teamId)! }));\n  }\n\n  async createTeamMember(insertMember: InsertTeamMember): Promise<TeamMember> {\n    const id = randomUUID();\n    const member: TeamMember = {\n      ...insertMember,\n      id,\n      createdAt: new Date(),\n    };\n    this.teamMembers.set(id, member);\n    return member;\n  }\n\n  async updateTeamMember(id: string, updates: Partial<TeamMember>): Promise<TeamMember> {\n    const member = this.teamMembers.get(id);\n    if (!member) throw new Error(\"Team member not found\");\n    \n    const updated = { ...member, ...updates };\n    this.teamMembers.set(id, updated);\n    return updated;\n  }\n\n  async deleteTeamMember(id: string): Promise<void> {\n    this.teamMembers.delete(id);\n  }\n\n  // Task operations\n  async getTask(id: string): Promise<Task | undefined> {\n    return this.tasks.get(id);\n  }\n\n  async getTaskWithDetails(id: string): Promise<TaskWithDetails | undefined> {\n    const task = this.tasks.get(id);\n    if (!task) return undefined;\n\n    const team = this.teams.get(task.teamId)!;\n    let responsibleMember;\n    if (task.responsibleMemberId) {\n      const member = this.teamMembers.get(task.responsibleMemberId);\n      if (member) {\n        responsibleMember = { ...member, user: this.users.get(member.userId)! };\n      }\n    }\n\n    return { ...task, team, responsibleMember };\n  }\n\n  async getTasksByTeam(teamId: string, includeCompleted = false): Promise<TaskWithDetails[]> {\n    const tasks = Array.from(this.tasks.values())\n      .filter(task => {\n        if (task.teamId !== teamId) return false;\n        if (includeCompleted) return true;\n        return task.status === TaskStatus.OPEN || task.status === TaskStatus.IN_PROGRESS || task.status === TaskStatus.BLOCKED;\n      });\n\n    const result: TaskWithDetails[] = [];\n    for (const task of tasks) {\n      const withDetails = await this.getTaskWithDetails(task.id);\n      if (withDetails) result.push(withDetails);\n    }\n\n    return result.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n  }\n\n  async getTasksByResponsibleMember(memberId: string, includeCompleted = false): Promise<TaskWithDetails[]> {\n    const tasks = Array.from(this.tasks.values())\n      .filter(task => {\n        if (task.responsibleMemberId !== memberId) return false;\n        if (includeCompleted) return true;\n        return task.status === TaskStatus.OPEN || task.status === TaskStatus.IN_PROGRESS || task.status === TaskStatus.BLOCKED;\n      });\n\n    const result: TaskWithDetails[] = [];\n    for (const task of tasks) {\n      const withDetails = await this.getTaskWithDetails(task.id);\n      if (withDetails) result.push(withDetails);\n    }\n\n    return result.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n  }\n\n  async createTask(insertTask: InsertTask): Promise<Task> {\n    const id = randomUUID();\n    const task: Task = {\n      ...insertTask,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.tasks.set(id, task);\n\n    // Create snapshot\n    await this.createTaskSnapshot(task, ChangeType.ADDED);\n\n    return task;\n  }\n\n  async updateTask(id: string, updates: Partial<Task>): Promise<Task> {\n    const task = this.tasks.get(id);\n    if (!task) throw new Error(\"Task not found\");\n    \n    const updated = { ...task, ...updates, updatedAt: new Date() };\n    this.tasks.set(id, updated);\n\n    // Create snapshot\n    await this.createTaskSnapshot(updated, ChangeType.EDITED);\n\n    return updated;\n  }\n\n  async deleteTask(id: string): Promise<void> {\n    const task = this.tasks.get(id);\n    if (task) {\n      await this.createTaskSnapshot(task, ChangeType.DELETED);\n      this.tasks.delete(id);\n    }\n  }\n\n  private async createTaskSnapshot(task: Task, changeType: string): Promise<void> {\n    const today = new Date().toISOString().split('T')[0];\n    let minutes = await this.getMinutesByTeamAndDate(task.teamId, today);\n    \n    if (!minutes) {\n      minutes = await this.createMinutes({\n        teamId: task.teamId,\n        date: today,\n        venue: this.teams.get(task.teamId)?.defaultVenue || null,\n        attendance: [],\n      });\n    }\n\n    await this.createSnapshot({\n      minutesId: minutes.id,\n      taskId: task.id,\n      changeType: changeType as any,\n      taskUpdatedAt: task.updatedAt,\n      payload: task,\n    });\n  }\n\n  // Minutes operations\n  async getMinutes(id: string): Promise<Minutes | undefined> {\n    return this.minutes.get(id);\n  }\n\n  async getMinutesByTeamAndDate(teamId: string, date: string): Promise<Minutes | undefined> {\n    return Array.from(this.minutes.values())\n      .find(m => m.teamId === teamId && m.date === date);\n  }\n\n  async getMinutesByTeam(teamId: string): Promise<MinutesWithSnapshots[]> {\n    const teamMinutes = Array.from(this.minutes.values())\n      .filter(m => m.teamId === teamId)\n      .sort((a, b) => b.date.localeCompare(a.date));\n\n    const result: MinutesWithSnapshots[] = [];\n    for (const minute of teamMinutes) {\n      const snapshots = await this.getSnapshotsByMinutes(minute.id);\n      const team = this.teams.get(minute.teamId)!;\n      result.push({ ...minute, snapshots, team });\n    }\n\n    return result;\n  }\n\n  async createMinutes(insertMinutes: InsertMinutes): Promise<Minutes> {\n    const id = randomUUID();\n    const minutes: Minutes = {\n      ...insertMinutes,\n      id,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    };\n    this.minutes.set(id, minutes);\n    return minutes;\n  }\n\n  async updateMinutes(id: string, updates: Partial<Minutes>): Promise<Minutes> {\n    const minutes = this.minutes.get(id);\n    if (!minutes) throw new Error(\"Minutes not found\");\n    \n    const updated = { ...minutes, ...updates, updatedAt: new Date() };\n    this.minutes.set(id, updated);\n    return updated;\n  }\n\n  // Snapshot operations\n  async createSnapshot(insertSnapshot: InsertSnapshot): Promise<Snapshot> {\n    const id = randomUUID();\n    const snapshot: Snapshot = {\n      ...insertSnapshot,\n      id,\n      recordedAt: new Date(),\n    };\n    this.snapshots.set(id, snapshot);\n    return snapshot;\n  }\n\n  async getSnapshotsByMinutes(minutesId: string): Promise<Snapshot[]> {\n    return Array.from(this.snapshots.values())\n      .filter(s => s.minutesId === minutesId)\n      .sort((a, b) => b.recordedAt.getTime() - a.recordedAt.getTime());\n  }\n\n  // Utility operations\n  async getUserRole(userId: string): Promise<string> {\n    const user = this.users.get(userId);\n    if (!user) return \"Member\";\n    \n    if (user.email === \"asif.shakir@gmail.com\") return \"Superadmin\";\n    if (user.isAdmin) return \"Admin\";\n    \n    const isCoordinator = Array.from(this.teamMembers.values())\n      .some(tm => tm.userId === userId && tm.isCoordinator);\n    \n    return isCoordinator ? \"Coordinator\" : \"Member\";\n  }\n\n  async isUserCoordinatorOfTeam(userId: string, teamId: string): Promise<boolean> {\n    return Array.from(this.teamMembers.values())\n      .some(tm => tm.userId === userId && tm.teamId === teamId && tm.isCoordinator);\n  }\n\n  async searchTasks(query: string, teamId?: string): Promise<TaskWithDetails[]> {\n    const searchTerm = query.toLowerCase();\n    const tasks = Array.from(this.tasks.values())\n      .filter(task => {\n        if (teamId && task.teamId !== teamId) return false;\n        \n        const titleMatch = task.title.toLowerCase().includes(searchTerm);\n        const notesMatch = task.notes?.toLowerCase().includes(searchTerm);\n        \n        // Search responsible member name\n        let memberMatch = false;\n        if (task.responsibleMemberId) {\n          const member = this.teamMembers.get(task.responsibleMemberId);\n          if (member) {\n            const user = this.users.get(member.userId);\n            if (user && user.displayName?.toLowerCase().includes(searchTerm)) {\n              memberMatch = true;\n            }\n          }\n        }\n        \n        return titleMatch || notesMatch || memberMatch;\n      });\n\n    const result: TaskWithDetails[] = [];\n    for (const task of tasks) {\n      const withDetails = await this.getTaskWithDetails(task.id);\n      if (withDetails) result.push(withDetails);\n    }\n\n    return result;\n  }\n\n  async searchUsers(query: string): Promise<User[]> {\n    const searchTerm = query.toLowerCase();\n    return Array.from(this.users.values())\n      .filter(user => {\n        const nameMatch = user.displayName?.toLowerCase().includes(searchTerm);\n        const emailMatch = user.email.toLowerCase().includes(searchTerm);\n        return nameMatch || emailMatch;\n      });\n  }\n\n  async searchTeams(query: string): Promise<TeamWithMembers[]> {\n    const searchTerm = query.toLowerCase();\n    const teams = await this.getAllTeamsWithMembers();\n    \n    return teams.filter(team => {\n      const nameMatch = team.name.toLowerCase().includes(searchTerm);\n      const memberMatch = team.members.some(member => \n        member.user.displayName?.toLowerCase().includes(searchTerm) ||\n        member.user.email.toLowerCase().includes(searchTerm)\n      );\n      return nameMatch || memberMatch;\n    });\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":17326},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, boolean, timestamp, integer, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: text(\"email\").notNull().unique(),\n  displayName: text(\"display_name\"),\n  photoUrl: text(\"photo_url\"),\n  isAdmin: boolean(\"is_admin\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Teams table\nexport const teams = pgTable(\"teams\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull().unique(),\n  defaultVenue: text(\"default_venue\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Team members table\nexport const teamMembers = pgTable(\"team_members\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  isCoordinator: boolean(\"is_coordinator\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Tasks table\nexport const tasks = pgTable(\"tasks\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  responsibleMemberId: varchar(\"responsible_member_id\").references(() => teamMembers.id),\n  title: text(\"title\").notNull(),\n  notes: text(\"notes\"),\n  status: text(\"status\", { enum: [\"Open\", \"In-Progress\", \"Blocked\", \"Done\", \"Canceled\"] }).notNull().default(\"Open\"),\n  priority: text(\"priority\", { enum: [\"Low\", \"Medium\", \"High\"] }).notNull().default(\"Medium\"),\n  dueDate: timestamp(\"due_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Minutes table (by team+date)\nexport const minutes = pgTable(\"minutes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  teamId: varchar(\"team_id\").notNull().references(() => teams.id, { onDelete: \"cascade\" }),\n  date: text(\"date\").notNull(), // yyyy-mm-dd format\n  venue: text(\"venue\"),\n  attendance: jsonb(\"attendance\").default([]), // array of team member IDs\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Snapshots table\nexport const snapshots = pgTable(\"snapshots\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  minutesId: varchar(\"minutes_id\").notNull().references(() => minutes.id, { onDelete: \"cascade\" }),\n  taskId: varchar(\"task_id\").notNull(), // reference for linking, but task may be deleted\n  changeType: text(\"change_type\", { enum: [\"Added\", \"Edited\", \"Deleted\"] }).notNull(),\n  recordedAt: timestamp(\"recorded_at\").defaultNow(),\n  taskUpdatedAt: timestamp(\"task_updated_at\").notNull(),\n  payload: jsonb(\"payload\").notNull(), // full task data at time of change\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeamSchema = createInsertSchema(teams).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTeamMemberSchema = createInsertSchema(teamMembers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertTaskSchema = createInsertSchema(tasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertMinutesSchema = createInsertSchema(minutes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSnapshotSchema = createInsertSchema(snapshots).omit({\n  id: true,\n  recordedAt: true,\n});\n\n// Types\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\nexport type InsertTeam = z.infer<typeof insertTeamSchema>;\nexport type Team = typeof teams.$inferSelect;\n\nexport type InsertTeamMember = z.infer<typeof insertTeamMemberSchema>;\nexport type TeamMember = typeof teamMembers.$inferSelect;\n\nexport type InsertTask = z.infer<typeof insertTaskSchema>;\nexport type Task = typeof tasks.$inferSelect;\n\nexport type InsertMinutes = z.infer<typeof insertMinutesSchema>;\nexport type Minutes = typeof minutes.$inferSelect;\n\nexport type InsertSnapshot = z.infer<typeof insertSnapshotSchema>;\nexport type Snapshot = typeof snapshots.$inferSelect;\n\n// Enums\nexport const TaskStatus = {\n  OPEN: \"Open\",\n  IN_PROGRESS: \"In-Progress\",\n  BLOCKED: \"Blocked\",\n  DONE: \"Done\",\n  CANCELED: \"Canceled\",\n} as const;\n\nexport const TaskPriority = {\n  LOW: \"Low\",\n  MEDIUM: \"Medium\",\n  HIGH: \"High\",\n} as const;\n\nexport const ChangeType = {\n  ADDED: \"Added\",\n  EDITED: \"Edited\",\n  DELETED: \"Deleted\",\n} as const;\n\n// Utility types\nexport type UserRole = \"Member\" | \"Coordinator\" | \"Admin\" | \"Superadmin\";\n\nexport interface TeamWithMembers extends Team {\n  members: (TeamMember & { user: User })[];\n  coordinators: (TeamMember & { user: User })[];\n}\n\nexport interface TaskWithDetails extends Task {\n  team: Team;\n  responsibleMember?: TeamMember & { user: User };\n}\n\nexport interface MinutesWithSnapshots extends Minutes {\n  snapshots: Snapshot[];\n  team: Team;\n}\n","size_bytes":5374},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { TeamProvider } from \"@/hooks/use-team\";\nimport NotFound from \"@/pages/not-found\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Tasks from \"@/pages/tasks\";\nimport Notes from \"@/pages/notes\";\nimport Teams from \"@/pages/teams\";\nimport Users from \"@/pages/users\";\nimport Profile from \"@/pages/profile\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/tasks\" component={Tasks} />\n      <Route path=\"/notes\" component={Notes} />\n      <Route path=\"/teams\" component={Teams} />\n      <Route path=\"/users\" component={Users} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <TeamProvider>\n            <Router />\n            <Toaster />\n          </TeamProvider>\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1341},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 20%, 96%);\n  --foreground: hsl(0, 0%, 9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 9%);\n  --primary: hsl(218, 89%, 53%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(210, 20%, 96%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --accent: hsl(260, 84%, 62%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(214, 32%, 91%);\n  --input: hsl(214, 32%, 91%);\n  --ring: hsl(218, 89%, 53%);\n  --chart-1: hsl(218, 89%, 53%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(0, 0%, 9%);\n  --sidebar-primary: hsl(218, 89%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 98%);\n  --sidebar-accent: hsl(260, 84%, 62%);\n  --sidebar-accent-foreground: hsl(0, 0%, 98%);\n  --sidebar-border: hsl(214, 32%, 91%);\n  --sidebar-ring: hsl(218, 89%, 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-xs: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05);\n  --shadow-sm: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05), 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1);\n  --shadow: 0px 1px 2px 0px hsl(0, 0%, 0%, 0.05), 0px 1px 3px 0px hsl(0, 0%, 0%, 0.1);\n  --shadow-md: 0px 4px 6px -1px hsl(0, 0%, 0%, 0.1), 0px 2px 4px -1px hsl(0, 0%, 0%, 0.06);\n  --shadow-lg: 0px 10px 15px -3px hsl(0, 0%, 0%, 0.1), 0px 4px 6px -2px hsl(0, 0%, 0%, 0.05);\n  --shadow-xl: 0px 20px 25px -5px hsl(0, 0%, 0%, 0.1), 0px 10px 10px -5px hsl(0, 0%, 0%, 0.04);\n  --shadow-2xl: 0px 25px 50px -12px hsl(0, 0%, 0%, 0.25);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(222, 84%, 5%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(222, 84%, 5%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(222, 84%, 5%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(218, 89%, 53%);\n  --primary-foreground: hsl(222, 84%, 5%);\n  --secondary: hsl(142, 76%, 36%);\n  --secondary-foreground: hsl(222, 84%, 5%);\n  --muted: hsl(217, 32%, 17%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(260, 84%, 62%);\n  --accent-foreground: hsl(222, 84%, 5%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(217, 32%, 17%);\n  --input: hsl(217, 32%, 17%);\n  --ring: hsl(218, 89%, 53%);\n  --sidebar: hsl(222, 84%, 5%);\n  --sidebar-foreground: hsl(210, 40%, 98%);\n  --sidebar-primary: hsl(218, 89%, 53%);\n  --sidebar-primary-foreground: hsl(222, 84%, 5%);\n  --sidebar-accent: hsl(260, 84%, 62%);\n  --sidebar-accent-foreground: hsl(222, 84%, 5%);\n  --sidebar-border: hsl(217, 32%, 17%);\n  --sidebar-ring: hsl(218, 89%, 53%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Georgia', serif;\n  --font-mono: 'Menlo', monospace;\n  --radius: 8px;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .task-card:hover {\n    @apply -translate-y-0.5 shadow-lg;\n  }\n\n  .status-open { \n    @apply bg-primary text-primary-foreground; \n  }\n  \n  .status-in-progress { \n    @apply bg-accent text-accent-foreground; \n  }\n  \n  .status-blocked { \n    @apply bg-destructive text-destructive-foreground; \n  }\n  \n  .status-done { \n    @apply bg-secondary text-secondary-foreground; \n  }\n\n  .priority-high { \n    @apply border-l-destructive; \n  }\n  \n  .priority-medium { \n    @apply border-l-accent; \n  }\n  \n  .priority-low { \n    @apply border-l-secondary; \n  }\n\n  .tab-active {\n    @apply text-primary border-t-2 border-primary;\n  }\n}\n","size_bytes":4064},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\nimport { onAuthStateChanged } from \"firebase/auth\";\nimport { auth } from \"@/lib/firebase\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface User {\n  id: string;\n  email: string;\n  displayName?: string;\n  photoUrl?: string;\n  isAdmin: boolean;\n}\n\ninterface AuthContextType {\n  user: User | null;\n  role: string;\n  loading: boolean;\n  setUser: (user: User | null, role?: string) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUserState] = useState<User | null>(null);\n  const [role, setRole] = useState<string>(\"Member\");\n  const [loading, setLoading] = useState(true);\n\n  const setUser = (newUser: User | null, newRole?: string) => {\n    setUserState(newUser);\n    if (newRole) {\n      setRole(newRole);\n    }\n  };\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n      try {\n        if (firebaseUser) {\n          // User is signed in, get or create user in our backend\n          const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n            email: firebaseUser.email,\n            displayName: firebaseUser.displayName,\n            photoUrl: firebaseUser.photoURL,\n          });\n          \n          const data = await response.json();\n          setUser(data.user, data.role);\n        } else {\n          // User is signed out\n          setUser(null);\n          setRole(\"Member\");\n        }\n      } catch (error) {\n        console.error(\"Auth state change error:\", error);\n        setUser(null);\n        setRole(\"Member\");\n      } finally {\n        setLoading(false);\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user, role, loading, setUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":2134},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-search.tsx":{"content":"import { useState, useEffect } from \"react\";\n\nexport function useSearch(delay: number = 200) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [debouncedQuery, setDebouncedQuery] = useState(\"\");\n\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedQuery(searchQuery);\n    }, delay);\n\n    return () => clearTimeout(timer);\n  }, [searchQuery, delay]);\n\n  return {\n    searchQuery,\n    setSearchQuery,\n    debouncedQuery,\n  };\n}\n","size_bytes":463},"client/src/hooks/use-team.tsx":{"content":"import { createContext, useContext, useState, ReactNode } from \"react\";\n\ninterface TeamContextType {\n  selectedTeam: string | null;\n  setSelectedTeam: (teamId: string | null) => void;\n}\n\nconst TeamContext = createContext<TeamContextType | undefined>(undefined);\n\nexport function TeamProvider({ children }: { children: ReactNode }) {\n  const [selectedTeam, setSelectedTeam] = useState<string | null>(null);\n\n  return (\n    <TeamContext.Provider value={{ selectedTeam, setSelectedTeam }}>\n      {children}\n    </TeamContext.Provider>\n  );\n}\n\nexport function useTeam() {\n  const context = useContext(TeamContext);\n  if (context === undefined) {\n    throw new Error(\"useTeam must be used within a TeamProvider\");\n  }\n  return context;\n}\n","size_bytes":733},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/auth.ts":{"content":"import { getAuth, signInWithRedirect, getRedirectResult, GoogleAuthProvider, signOut } from \"firebase/auth\";\nimport { auth } from \"./firebase\";\nimport { apiRequest } from \"./queryClient\";\n\nconst provider = new GoogleAuthProvider();\n\nexport async function signInWithGoogle() {\n  try {\n    await signInWithRedirect(auth, provider);\n  } catch (error) {\n    console.error(\"Sign in error:\", error);\n    throw error;\n  }\n}\n\nexport async function handleRedirectResult() {\n  try {\n    const result = await getRedirectResult(auth);\n    if (result?.user) {\n      // Send user data to backend\n      const response = await apiRequest(\"POST\", \"/api/auth/login\", {\n        email: result.user.email,\n        displayName: result.user.displayName,\n        photoUrl: result.user.photoURL,\n      });\n      return await response.json();\n    }\n    return null;\n  } catch (error) {\n    console.error(\"Redirect result error:\", error);\n    throw error;\n  }\n}\n\nexport async function signOutUser() {\n  try {\n    await signOut(auth);\n  } catch (error) {\n    console.error(\"Sign out error:\", error);\n    throw error;\n  }\n}\n","size_bytes":1095},"client/src/lib/firebase.ts":{"content":"import { initializeApp } from \"firebase/app\";\nimport { getAuth } from \"firebase/auth\";\n\nconst firebaseConfig = {\n  apiKey: import.meta.env.VITE_FIREBASE_API_KEY || \"demo-api-key\",\n  authDomain: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"demo-project\"}.firebaseapp.com`,\n  projectId: import.meta.env.VITE_FIREBASE_PROJECT_ID || \"demo-project\",\n  storageBucket: `${import.meta.env.VITE_FIREBASE_PROJECT_ID || \"demo-project\"}.firebasestorage.app`,\n  appId: import.meta.env.VITE_FIREBASE_APP_ID || \"demo-app-id\",\n};\n\nconst app = initializeApp(firebaseConfig);\nexport const auth = getAuth(app);\nexport default app;\n","size_bytes":615},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/dashboard.tsx":{"content":"import { AuthGuard } from \"@/components/auth/auth-guard\";\nimport { AppShell } from \"@/components/layout/app-shell\";\nimport { useLocation } from \"wouter\";\nimport { useEffect } from \"react\";\n\nexport default function Dashboard() {\n  const [location, setLocation] = useLocation();\n\n  useEffect(() => {\n    // Redirect to tasks by default\n    if (location === \"/\") {\n      setLocation(\"/tasks\");\n    }\n  }, [location, setLocation]);\n\n  return (\n    <AuthGuard>\n      <AppShell>\n        <div className=\"flex items-center justify-center h-full\">\n          <p className=\"text-muted-foreground\">Redirecting to tasks...</p>\n        </div>\n      </AppShell>\n    </AuthGuard>\n  );\n}\n","size_bytes":671},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/notes.tsx":{"content":"import { AuthGuard } from \"@/components/auth/auth-guard\";\nimport { AppShell } from \"@/components/layout/app-shell\";\nimport { SnapshotCard } from \"@/components/notes/snapshot-card\";\nimport { Input } from \"@/components/ui/input\";\nimport { useTeam } from \"@/hooks/use-team\";\nimport { useSearch } from \"@/hooks/use-search\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Notes() {\n  const { selectedTeam } = useTeam();\n  const { searchQuery, setSearchQuery, debouncedQuery } = useSearch();\n\n  // Fetch minutes for the selected team\n  const { data: minutes = [], isLoading } = useQuery({\n    queryKey: [\"/api/minutes\", selectedTeam],\n    queryFn: async () => {\n      if (!selectedTeam) return [];\n      \n      const response = await fetch(`/api/minutes?teamId=${selectedTeam}`, { \n        credentials: \"include\" \n      });\n      if (response.ok) {\n        return response.json();\n      }\n      return [];\n    },\n    enabled: !!selectedTeam,\n  });\n\n  // Filter minutes and snapshots by search query\n  const filteredMinutes = minutes.filter((minute: any) => {\n    if (!debouncedQuery) return true;\n    \n    const searchTerm = debouncedQuery.toLowerCase();\n    \n    // Search in date\n    const dateMatch = minute.date.includes(searchTerm);\n    \n    // Search in venue\n    const venueMatch = minute.venue?.toLowerCase().includes(searchTerm);\n    \n    // Search in snapshots\n    const snapshotMatch = minute.snapshots?.some((snapshot: any) => {\n      const task = snapshot.payload;\n      const titleMatch = task.title?.toLowerCase().includes(searchTerm);\n      const notesMatch = task.notes?.toLowerCase().includes(searchTerm);\n      const changeTypeMatch = snapshot.changeType?.toLowerCase().includes(searchTerm);\n      const memberMatch = task.responsibleMember?.user?.displayName?.toLowerCase().includes(searchTerm);\n      \n      return titleMatch || notesMatch || changeTypeMatch || memberMatch;\n    });\n    \n    return dateMatch || venueMatch || snapshotMatch;\n  });\n\n  if (!selectedTeam) {\n    return (\n      <AuthGuard>\n        <AppShell>\n          <div className=\"flex items-center justify-center h-full p-4\" data-testid=\"no-team-selected\">\n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-foreground mb-2\">\n                Select a Team\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Choose a team from the dropdown above to view meeting notes.\n              </p>\n            </div>\n          </div>\n        </AppShell>\n      </AuthGuard>\n    );\n  }\n\n  return (\n    <AuthGuard>\n      <AppShell>\n        <div className=\"h-full flex flex-col\" data-testid=\"notes-page\">\n          {/* Search Bar */}\n          <div className=\"p-4 bg-card border-b border-border\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search notes and snapshots...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-ring text-sm\"\n                data-testid=\"search-notes-input\"\n              />\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            </div>\n          </div>\n\n          {/* Minutes List */}\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4\" data-testid=\"minutes-list\">\n            {isLoading ? (\n              Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"space-y-3\">\n                  <Skeleton className=\"h-6 w-48\" />\n                  <div className=\"space-y-2 ml-4\">\n                    <Skeleton className=\"h-24 w-full\" />\n                    <Skeleton className=\"h-20 w-full\" />\n                  </div>\n                </div>\n              ))\n            ) : filteredMinutes.length === 0 ? (\n              <div className=\"text-center py-8\" data-testid=\"no-minutes-message\">\n                <h3 className=\"font-medium text-foreground mb-2\">\n                  {debouncedQuery ? \"No notes found\" : \"No meeting notes yet\"}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {debouncedQuery \n                    ? \"Try adjusting your search query.\"\n                    : \"Notes will appear here when tasks are created or updated.\"\n                  }\n                </p>\n              </div>\n            ) : (\n              filteredMinutes.map((minute: any) => (\n                <div key={minute.id} className=\"space-y-3\" data-testid={`minute-${minute.id}`}>\n                  <div className=\"flex items-center justify-between\">\n                    <h3 className=\"text-lg font-semibold text-foreground\" data-testid=\"minute-date\">\n                      {new Date(minute.date).toLocaleDateString('en-US', {\n                        weekday: 'long',\n                        year: 'numeric',\n                        month: 'long',\n                        day: 'numeric'\n                      })}\n                    </h3>\n                    <div className=\"text-sm text-muted-foreground\" data-testid=\"minute-meta\">\n                      <span>{minute.venue || \"No venue\"}</span>\n                      {Array.isArray(minute.attendance) && (\n                        <>\n                          {\" • \"}\n                          <span>{minute.attendance.length} present</span>\n                        </>\n                      )}\n                    </div>\n                  </div>\n                  \n                  {/* Snapshot Cards */}\n                  {minute.snapshots && minute.snapshots.length > 0 ? (\n                    <div className=\"space-y-2 ml-4\" data-testid=\"snapshots-list\">\n                      {minute.snapshots\n                        .filter((snapshot: any) => {\n                          if (!debouncedQuery) return true;\n                          \n                          const searchTerm = debouncedQuery.toLowerCase();\n                          const task = snapshot.payload;\n                          const titleMatch = task.title?.toLowerCase().includes(searchTerm);\n                          const notesMatch = task.notes?.toLowerCase().includes(searchTerm);\n                          const changeTypeMatch = snapshot.changeType?.toLowerCase().includes(searchTerm);\n                          const memberMatch = task.responsibleMember?.user?.displayName?.toLowerCase().includes(searchTerm);\n                          \n                          return titleMatch || notesMatch || changeTypeMatch || memberMatch;\n                        })\n                        .map((snapshot: any) => (\n                          <SnapshotCard key={snapshot.id} snapshot={snapshot} />\n                        ))\n                      }\n                    </div>\n                  ) : (\n                    <div className=\"ml-4 p-3 bg-muted/50 rounded-lg text-center text-sm text-muted-foreground\">\n                      No task changes recorded for this date\n                    </div>\n                  )}\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </AppShell>\n    </AuthGuard>\n  );\n}\n","size_bytes":7386},"client/src/pages/profile.tsx":{"content":"import { AuthGuard } from \"@/components/auth/auth-guard\";\nimport { AppShell } from \"@/components/layout/app-shell\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { signOutUser } from \"@/lib/auth\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Users, UserCog, LogOut } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user, role } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: userTeams = [] } = useQuery({\n    queryKey: [\"/api/teams\", \"user\", user?.id],\n    queryFn: async () => {\n      if (!user?.id) return [];\n      const response = await fetch(\"/api/teams\", { credentials: \"include\" });\n      if (response.ok) {\n        const allTeams = await response.json();\n        return allTeams.filter((team: any) => \n          team.members?.some((member: any) => member.userId === user.id)\n        );\n      }\n      return [];\n    },\n    enabled: !!user?.id,\n  });\n\n  const handleSignOut = async () => {\n    try {\n      await signOutUser();\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Sign out failed:\", error);\n    }\n  };\n\n  const getInitials = (name?: string) => {\n    if (!name) return user?.email?.[0]?.toUpperCase() || \"U\";\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"Superadmin\": return \"bg-destructive text-destructive-foreground\";\n      case \"Admin\": return \"bg-primary text-primary-foreground\";\n      case \"Coordinator\": return \"bg-accent text-accent-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const isAdmin = role === \"Admin\" || role === \"Superadmin\";\n\n  return (\n    <AuthGuard>\n      <AppShell>\n        <div className=\"h-full flex flex-col\" data-testid=\"profile-page\">\n          <div className=\"p-4 bg-card border-b border-border\">\n            <h2 className=\"text-xl font-semibold text-foreground\">Profile</h2>\n          </div>\n\n          <div className=\"flex-1 p-4 space-y-6 overflow-y-auto\">\n            {/* User Info */}\n            <Card data-testid=\"user-info-card\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center space-x-4 mb-4\">\n                  <Avatar className=\"w-16 h-16\">\n                    <AvatarImage src={user?.photoUrl || undefined} />\n                    <AvatarFallback className=\"text-xl font-bold\">\n                      {getInitials(user?.displayName)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <h3 className=\"text-xl font-semibold text-foreground\" data-testid=\"user-display-name\">\n                      {user?.displayName || \"Unnamed User\"}\n                    </h3>\n                    <p className=\"text-muted-foreground\" data-testid=\"user-email-display\">\n                      {user?.email}\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium text-foreground\">Role:</span>\n                    <Badge className={`text-xs ${getRoleColor(role)}`} data-testid=\"user-role-badge\">\n                      {role}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-sm font-medium text-foreground\">Teams:</span>\n                    <span className=\"text-sm text-muted-foreground\" data-testid=\"user-teams-count\">\n                      {userTeams.length} team{userTeams.length !== 1 ? 's' : ''}\n                    </span>\n                  </div>\n\n                  {userTeams.length > 0 && (\n                    <div className=\"mt-3\">\n                      <h4 className=\"text-sm font-medium text-foreground mb-2\">Member of:</h4>\n                      <div className=\"flex flex-wrap gap-1\" data-testid=\"user-teams-list\">\n                        {userTeams.map((team: any) => (\n                          <Badge key={team.id} variant=\"outline\" className=\"text-xs\">\n                            {team.name}\n                          </Badge>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Admin Links */}\n            {isAdmin && (\n              <Card data-testid=\"admin-actions-card\">\n                <CardContent className=\"p-6\">\n                  <h4 className=\"font-semibold text-foreground mb-4\">Admin Actions</h4>\n                  <div className=\"space-y-3\">\n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start p-3 h-auto\"\n                      onClick={() => setLocation(\"/teams\")}\n                      data-testid=\"button-manage-teams\"\n                    >\n                      <Users className=\"w-5 h-5 mr-3 text-muted-foreground\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium text-foreground\">Manage Teams</div>\n                        <div className=\"text-sm text-muted-foreground\">Create and manage team settings</div>\n                      </div>\n                    </Button>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      className=\"w-full justify-start p-3 h-auto\"\n                      onClick={() => setLocation(\"/users\")}\n                      data-testid=\"button-manage-users\"\n                    >\n                      <UserCog className=\"w-5 h-5 mr-3 text-muted-foreground\" />\n                      <div className=\"text-left\">\n                        <div className=\"font-medium text-foreground\">Manage Users</div>\n                        <div className=\"text-sm text-muted-foreground\">Control user permissions and roles</div>\n                      </div>\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Sign Out */}\n            <Card data-testid=\"sign-out-card\">\n              <CardContent className=\"p-6\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start p-3 h-auto text-destructive hover:text-destructive hover:bg-destructive/10\"\n                  onClick={handleSignOut}\n                  data-testid=\"button-sign-out\"\n                >\n                  <LogOut className=\"w-5 h-5 mr-3\" />\n                  <div className=\"text-left\">\n                    <div className=\"font-medium\">Sign Out</div>\n                    <div className=\"text-sm opacity-75\">End your current session</div>\n                  </div>\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </AppShell>\n    </AuthGuard>\n  );\n}\n","size_bytes":7296},"client/src/pages/tasks.tsx":{"content":"import { useState } from \"react\";\nimport { AuthGuard } from \"@/components/auth/auth-guard\";\nimport { AppShell } from \"@/components/layout/app-shell\";\nimport { DateCard } from \"@/components/tasks/date-card\";\nimport { TaskCard } from \"@/components/tasks/task-card\";\nimport { AddTaskModal } from \"@/components/tasks/add-task-modal\";\nimport { FAB } from \"@/components/ui/fab\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useTeam } from \"@/hooks/use-team\";\nimport { useSearch } from \"@/hooks/use-search\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Search } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Tasks() {\n  const { user, role } = useAuth();\n  const { selectedTeam } = useTeam();\n  const [showAddTaskModal, setShowAddTaskModal] = useState(false);\n  const { searchQuery, setSearchQuery, debouncedQuery } = useSearch();\n\n  const canCreateTasks = role === \"Admin\" || role === \"Superadmin\" || role === \"Coordinator\";\n\n  // Get team member info for the current user\n  const { data: userTeamMember } = useQuery({\n    queryKey: [\"/api/teams\", selectedTeam, \"member\", user?.id],\n    queryFn: async () => {\n      if (!selectedTeam || !user?.id) return null;\n      const response = await fetch(\"/api/teams\", { credentials: \"include\" });\n      if (response.ok) {\n        const teams = await response.json();\n        const team = teams.find((t: any) => t.id === selectedTeam);\n        return team?.members?.find((m: any) => m.userId === user.id);\n      }\n      return null;\n    },\n    enabled: !!selectedTeam && !!user?.id,\n  });\n\n  // Fetch tasks based on role and team\n  const { data: tasks = [], isLoading } = useQuery({\n    queryKey: [\"/api/tasks\", selectedTeam, userTeamMember?.id, role],\n    queryFn: async () => {\n      if (!selectedTeam) return [];\n      \n      let url = \"/api/tasks\";\n      const params = new URLSearchParams();\n      \n      if (role === \"Member\") {\n        // Members only see tasks assigned to them\n        if (!userTeamMember?.id) return [];\n        params.append(\"memberId\", userTeamMember.id);\n      } else {\n        // Admins, Superadmins, and Coordinators see all team tasks\n        params.append(\"teamId\", selectedTeam);\n      }\n      \n      const response = await fetch(`${url}?${params}`, { credentials: \"include\" });\n      if (response.ok) {\n        return response.json();\n      }\n      return [];\n    },\n    enabled: !!selectedTeam && (role !== \"Member\" || !!userTeamMember),\n  });\n\n  // Search tasks\n  const { data: searchResults = [] } = useQuery({\n    queryKey: [\"/api/tasks/search\", debouncedQuery, selectedTeam],\n    queryFn: async () => {\n      if (!debouncedQuery || !selectedTeam) return [];\n      \n      const params = new URLSearchParams();\n      params.append(\"q\", debouncedQuery);\n      params.append(\"teamId\", selectedTeam);\n      \n      const response = await fetch(`/api/tasks/search?${params}`, { credentials: \"include\" });\n      if (response.ok) {\n        return response.json();\n      }\n      return [];\n    },\n    enabled: !!debouncedQuery && !!selectedTeam,\n  });\n\n  const displayTasks = debouncedQuery ? searchResults : tasks;\n  const canEditTasks = role === \"Admin\" || role === \"Superadmin\" || \n                      (role === \"Coordinator\" && !!selectedTeam);\n\n  if (!selectedTeam) {\n    return (\n      <AuthGuard>\n        <AppShell>\n          <div className=\"flex items-center justify-center h-full p-4\" data-testid=\"no-team-selected\">\n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-foreground mb-2\">\n                Select a Team\n              </h2>\n              <p className=\"text-muted-foreground\">\n                Choose a team from the dropdown above to view and manage tasks.\n              </p>\n            </div>\n          </div>\n        </AppShell>\n      </AuthGuard>\n    );\n  }\n\n  return (\n    <AuthGuard>\n      <AppShell>\n        <div className=\"h-full flex flex-col\" data-testid=\"tasks-page\">\n          <DateCard />\n          \n          {/* Search Bar */}\n          <div className=\"p-4 bg-card border-b border-border\">\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search tasks...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-ring text-sm\"\n                data-testid=\"search-tasks-input\"\n              />\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            </div>\n          </div>\n\n          {/* Tasks List */}\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-3\" data-testid=\"tasks-list\">\n            {isLoading ? (\n              Array.from({ length: 3 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-32 w-full\" />\n              ))\n            ) : displayTasks.length === 0 ? (\n              <div className=\"text-center py-8\" data-testid=\"no-tasks-message\">\n                <h3 className=\"font-medium text-foreground mb-2\">\n                  {debouncedQuery ? \"No tasks found\" : \"No open tasks\"}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {debouncedQuery \n                    ? \"Try adjusting your search query.\"\n                    : \"Create your first task to get started.\"\n                  }\n                </p>\n              </div>\n            ) : (\n              displayTasks.map((task: any) => (\n                <TaskCard\n                  key={task.id}\n                  task={task}\n                  canEdit={canEditTasks}\n                />\n              ))\n            )}\n          </div>\n\n          {/* Add Task FAB */}\n          {canCreateTasks && (\n            <FAB onClick={() => setShowAddTaskModal(true)} data-testid=\"fab-add-task\">\n              <Plus className=\"w-6 h-6\" />\n            </FAB>\n          )}\n\n          <AddTaskModal\n            open={showAddTaskModal}\n            onClose={() => setShowAddTaskModal(false)}\n          />\n        </div>\n      </AppShell>\n    </AuthGuard>\n  );\n}\n","size_bytes":6294},"client/src/pages/teams.tsx":{"content":"import { useState } from \"react\";\nimport { AuthGuard } from \"@/components/auth/auth-guard\";\nimport { AppShell } from \"@/components/layout/app-shell\";\nimport { TeamCard } from \"@/components/teams/team-card\";\nimport { AddTeamModal } from \"@/components/teams/add-team-modal\";\nimport { FAB } from \"@/components/ui/fab\";\nimport { Input } from \"@/components/ui/input\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useSearch } from \"@/hooks/use-search\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Plus, Search } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\nexport default function Teams() {\n  const { role } = useAuth();\n  const [showAddTeamModal, setShowAddTeamModal] = useState(false);\n  const { searchQuery, setSearchQuery, debouncedQuery } = useSearch();\n\n  // Only admins can access this page\n  if (role !== \"Admin\" && role !== \"Superadmin\") {\n    return (\n      <AuthGuard>\n        <AppShell>\n          <div className=\"flex items-center justify-center h-full p-4\" data-testid=\"access-denied\">\n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-foreground mb-2\">\n                Access Denied\n              </h2>\n              <p className=\"text-muted-foreground\">\n                You don't have permission to access team management.\n              </p>\n            </div>\n          </div>\n        </AppShell>\n      </AuthGuard>\n    );\n  }\n\n  const { data: teams = [], isLoading } = useQuery({\n    queryKey: [\"/api/teams\"],\n  });\n\n  // Search teams\n  const { data: searchResults = [] } = useQuery({\n    queryKey: [\"/api/teams/search\", debouncedQuery],\n    queryFn: async () => {\n      if (!debouncedQuery) return [];\n      \n      const params = new URLSearchParams();\n      params.append(\"q\", debouncedQuery);\n      \n      const response = await fetch(`/api/teams/search?${params}`, { credentials: \"include\" });\n      if (response.ok) {\n        return response.json();\n      }\n      return [];\n    },\n    enabled: !!debouncedQuery,\n  });\n\n  const displayTeams = debouncedQuery ? searchResults : teams;\n\n  return (\n    <AuthGuard>\n      <AppShell>\n        <div className=\"h-full flex flex-col\" data-testid=\"teams-page\">\n          <div className=\"p-4 bg-card border-b border-border\">\n            <h2 className=\"text-xl font-semibold text-foreground mb-4\">Teams</h2>\n            \n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Input\n                type=\"text\"\n                placeholder=\"Search teams and members...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-full pl-10 pr-4 py-3 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-ring text-sm\"\n                data-testid=\"search-teams-input\"\n              />\n              <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n            </div>\n          </div>\n\n          {/* Teams List */}\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-4\" data-testid=\"teams-list\">\n            {isLoading ? (\n              Array.from({ length: 3 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-64 w-full\" />\n              ))\n            ) : displayTeams.length === 0 ? (\n              <div className=\"text-center py-8\" data-testid=\"no-teams-message\">\n                <h3 className=\"font-medium text-foreground mb-2\">\n                  {debouncedQuery ? \"No teams found\" : \"No teams yet\"}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {debouncedQuery \n                    ? \"Try adjusting your search query.\"\n                    : \"Create your first team to get started.\"\n                  }\n                </p>\n              </div>\n            ) : (\n              displayTeams.map((team: any) => (\n                <TeamCard key={team.id} team={team} />\n              ))\n            )}\n          </div>\n\n          {/* Add Team FAB */}\n          <FAB onClick={() => setShowAddTeamModal(true)} data-testid=\"fab-add-team\">\n            <Plus className=\"w-6 h-6\" />\n          </FAB>\n\n          <AddTeamModal\n            open={showAddTeamModal}\n            onClose={() => setShowAddTeamModal(false)}\n          />\n        </div>\n      </AppShell>\n    </AuthGuard>\n  );\n}\n","size_bytes":4402},"client/src/pages/users.tsx":{"content":"import { AuthGuard } from \"@/components/auth/auth-guard\";\nimport { AppShell } from \"@/components/layout/app-shell\";\nimport { UserCard } from \"@/components/users/user-card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useSearch } from \"@/hooks/use-search\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Search } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useState } from \"react\";\n\nexport default function Users() {\n  const { role } = useAuth();\n  const { searchQuery, setSearchQuery, debouncedQuery } = useSearch();\n  const [sortBy, setSortBy] = useState(\"admin-desc\");\n\n  // Only admins can access this page\n  if (role !== \"Admin\" && role !== \"Superadmin\") {\n    return (\n      <AuthGuard>\n        <AppShell>\n          <div className=\"flex items-center justify-center h-full p-4\" data-testid=\"access-denied\">\n            <div className=\"text-center\">\n              <h2 className=\"text-lg font-semibold text-foreground mb-2\">\n                Access Denied\n              </h2>\n              <p className=\"text-muted-foreground\">\n                You don't have permission to access user management.\n              </p>\n            </div>\n          </div>\n        </AppShell>\n      </AuthGuard>\n    );\n  }\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Search users\n  const { data: searchResults = [] } = useQuery({\n    queryKey: [\"/api/users/search\", debouncedQuery],\n    queryFn: async () => {\n      if (!debouncedQuery) return [];\n      \n      const params = new URLSearchParams();\n      params.append(\"q\", debouncedQuery);\n      \n      const response = await fetch(`/api/users/search?${params}`, { credentials: \"include\" });\n      if (response.ok) {\n        return response.json();\n      }\n      return [];\n    },\n    enabled: !!debouncedQuery,\n  });\n\n  // Sort users\n  const sortUsers = (userList: any[]) => {\n    return [...userList].sort((a, b) => {\n      switch (sortBy) {\n        case \"admin-desc\":\n          if (a.role === b.role) return (a.displayName || a.email).localeCompare(b.displayName || b.email);\n          const roleOrder = { \"Superadmin\": 4, \"Admin\": 3, \"Coordinator\": 2, \"Member\": 1 };\n          return (roleOrder[b.role as keyof typeof roleOrder] || 0) - (roleOrder[a.role as keyof typeof roleOrder] || 0);\n        case \"name-asc\":\n          return (a.displayName || a.email).localeCompare(b.displayName || b.email);\n        case \"name-desc\":\n          return (b.displayName || b.email).localeCompare(a.displayName || a.email);\n        case \"email-asc\":\n          return a.email.localeCompare(b.email);\n        default:\n          return 0;\n      }\n    });\n  };\n\n  const displayUsers = sortUsers(debouncedQuery ? searchResults : users);\n\n  return (\n    <AuthGuard>\n      <AppShell>\n        <div className=\"h-full flex flex-col\" data-testid=\"users-page\">\n          <div className=\"p-4 bg-card border-b border-border\">\n            <h2 className=\"text-xl font-semibold text-foreground mb-4\">Users</h2>\n            \n            {/* Search and Sort */}\n            <div className=\"space-y-3\">\n              <div className=\"relative\">\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search users...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"w-full pl-10 pr-4 py-3 bg-background border border-border rounded-lg focus:outline-none focus:ring-2 focus:ring-ring text-sm\"\n                  data-testid=\"search-users-input\"\n                />\n                <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground\" />\n              </div>\n              \n              <div className=\"flex space-x-2\">\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"sort-users-select\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"admin-desc\">Admin Status ↓</SelectItem>\n                    <SelectItem value=\"name-asc\">Name ↑</SelectItem>\n                    <SelectItem value=\"name-desc\">Name ↓</SelectItem>\n                    <SelectItem value=\"email-asc\">Email ↑</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </div>\n          </div>\n\n          {/* Users List */}\n          <div className=\"flex-1 overflow-y-auto p-4 space-y-3\" data-testid=\"users-list\">\n            {isLoading ? (\n              Array.from({ length: 5 }).map((_, i) => (\n                <Skeleton key={i} className=\"h-20 w-full\" />\n              ))\n            ) : displayUsers.length === 0 ? (\n              <div className=\"text-center py-8\" data-testid=\"no-users-message\">\n                <h3 className=\"font-medium text-foreground mb-2\">\n                  {debouncedQuery ? \"No users found\" : \"No users yet\"}\n                </h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  {debouncedQuery \n                    ? \"Try adjusting your search query.\"\n                    : \"Users will appear here when they sign in.\"\n                  }\n                </p>\n              </div>\n            ) : (\n              displayUsers.map((user: any) => (\n                <UserCard key={user.id} user={user} />\n              ))\n            )}\n          </div>\n        </div>\n      </AppShell>\n    </AuthGuard>\n  );\n}\n","size_bytes":5686},"client/src/components/auth/auth-guard.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport SignIn from \"@/pages/auth/sign-in\";\n\ninterface AuthGuardProps {\n  children: React.ReactNode;\n}\n\nexport function AuthGuard({ children }: AuthGuardProps) {\n  const { user, loading } = useAuth();\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background p-4\">\n        <div className=\"space-y-4\">\n          <Skeleton className=\"h-16 w-full\" />\n          <Skeleton className=\"h-32 w-full\" />\n          <Skeleton className=\"h-64 w-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (!user) {\n    return <SignIn />;\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":671},"client/src/components/layout/app-shell.tsx":{"content":"import { Header } from \"./header\";\nimport { BottomNavigation } from \"./bottom-navigation\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\ninterface AppShellProps {\n  children: React.ReactNode;\n}\n\nexport function AppShell({ children }: AppShellProps) {\n  const { user, role } = useAuth();\n\n  return (\n    <div className=\"min-h-screen flex flex-col bg-background\" data-testid=\"app-shell\">\n      <Header />\n      <main className=\"flex-1 overflow-hidden\">\n        {children}\n      </main>\n      <BottomNavigation userRole={role} />\n    </div>\n  );\n}\n","size_bytes":544},"client/src/components/layout/bottom-navigation.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  ClipboardList, \n  FileText, \n  Users, \n  UserCog, \n  User \n} from \"lucide-react\";\n\ninterface BottomNavigationProps {\n  userRole?: string;\n}\n\nexport function BottomNavigation({ userRole }: BottomNavigationProps) {\n  const [location, setLocation] = useLocation();\n\n  const isAdmin = userRole === \"Admin\" || userRole === \"Superadmin\";\n\n  const tabs = [\n    { id: \"tasks\", label: \"Tasks\", icon: ClipboardList, path: \"/tasks\", alwaysShow: true },\n    { id: \"notes\", label: \"Notes\", icon: FileText, path: \"/notes\", alwaysShow: true },\n    { id: \"teams\", label: \"Teams\", icon: Users, path: \"/teams\", alwaysShow: false, adminOnly: true },\n    { id: \"users\", label: \"Users\", icon: UserCog, path: \"/users\", alwaysShow: false, adminOnly: true },\n    { id: \"profile\", label: \"Profile\", icon: User, path: \"/profile\", alwaysShow: true },\n  ];\n\n  const visibleTabs = tabs.filter(tab => \n    tab.alwaysShow || (tab.adminOnly && isAdmin)\n  );\n\n  return (\n    <nav className=\"bg-card border-t border-border px-2 py-2 flex items-center justify-around sticky bottom-0 z-40\" data-testid=\"bottom-navigation\">\n      {visibleTabs.map((tab) => {\n        const Icon = tab.icon;\n        const isActive = location === tab.path || (location === \"/\" && tab.path === \"/tasks\");\n        \n        return (\n          <button\n            key={tab.id}\n            onClick={() => setLocation(tab.path)}\n            className={cn(\n              \"flex flex-col items-center py-2 px-3 rounded-lg transition-colors\",\n              isActive \n                ? \"text-primary border-t-2 border-primary\" \n                : \"text-muted-foreground hover:text-foreground\"\n            )}\n            data-testid={`nav-${tab.id}`}\n          >\n            <Icon className=\"w-6 h-6 mb-1\" />\n            <span className=\"text-xs font-medium\">{tab.label}</span>\n          </button>\n        );\n      })}\n    </nav>\n  );\n}\n","size_bytes":1951},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useTeam } from \"@/hooks/use-team\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { signOutUser } from \"@/lib/auth\";\nimport { useLocation } from \"wouter\";\n\nexport function Header() {\n  const { user } = useAuth();\n  const { selectedTeam, setSelectedTeam } = useTeam();\n  const [, setLocation] = useLocation();\n\n  const { data: teams = [] } = useQuery<any[]>({\n    queryKey: [\"/api/teams\"],\n  });\n\n  const handleSignOut = async () => {\n    try {\n      await signOutUser();\n      window.location.reload();\n    } catch (error) {\n      console.error(\"Sign out failed:\", error);\n    }\n  };\n\n  const handleProfileClick = () => {\n    setLocation(\"/profile\");\n  };\n\n  const getInitials = (name?: string) => {\n    if (!name) return \"U\";\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-4 py-3 flex items-center justify-between sticky top-0 z-40\" data-testid=\"app-header\">\n      <div className=\"flex items-center space-x-3\">\n        <h1 className=\"text-xl font-semibold text-foreground\" data-testid=\"app-title\">\n          TSR Planner\n        </h1>\n      </div>\n      \n      <div className=\"flex-1 mx-4\">\n        <Select value={selectedTeam || \"\"} onValueChange={setSelectedTeam} data-testid=\"team-selector\">\n          <SelectTrigger className=\"w-full\">\n            <SelectValue placeholder=\"Select Team\" />\n          </SelectTrigger>\n          <SelectContent>\n            {teams.map((team: any) => (\n              <SelectItem key={team.id} value={team.id} data-testid={`team-option-${team.id}`}>\n                {team.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <DropdownMenu>\n        <DropdownMenuTrigger asChild data-testid=\"user-menu-trigger\">\n          <Avatar className=\"h-8 w-8 cursor-pointer\">\n            <AvatarImage src={user?.photoUrl || undefined} />\n            <AvatarFallback className=\"text-sm font-medium\">\n              {getInitials(user?.displayName)}\n            </AvatarFallback>\n          </Avatar>\n        </DropdownMenuTrigger>\n        <DropdownMenuContent align=\"end\">\n          <DropdownMenuItem onClick={handleProfileClick} data-testid=\"menu-profile\">\n            Profile\n          </DropdownMenuItem>\n          <DropdownMenuItem onClick={handleSignOut} data-testid=\"menu-signout\">\n            Sign Out\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </header>\n  );\n}\n","size_bytes":2953},"client/src/components/notes/snapshot-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\n\ninterface SnapshotCardProps {\n  snapshot: any;\n}\n\nexport function SnapshotCard({ snapshot }: SnapshotCardProps) {\n  const task = snapshot.payload;\n  const isDeleted = snapshot.changeType === \"Deleted\";\n\n  const getChangeTypeColor = (changeType: string) => {\n    switch (changeType) {\n      case \"Added\": return \"bg-secondary text-secondary-foreground border-l-secondary\";\n      case \"Edited\": return \"bg-accent text-accent-foreground border-l-accent\";\n      case \"Deleted\": return \"bg-destructive/10 text-destructive border-l-destructive\";\n      default: return \"bg-muted text-muted-foreground border-l-muted\";\n    }\n  };\n\n  const getChangeTypeIcon = (changeType: string) => {\n    switch (changeType) {\n      case \"Added\": return \"+\";\n      case \"Edited\": return \"~\";\n      case \"Deleted\": return \"×\";\n      default: return \"·\";\n    }\n  };\n\n  return (\n    <Card \n      className={cn(\n        \"border-l-4 transition-all duration-200\",\n        isDeleted ? \"opacity-75 bg-muted/50\" : \"bg-card\",\n        getChangeTypeColor(snapshot.changeType).split(\" \").slice(2).join(\" \")\n      )}\n      data-testid={`snapshot-card-${snapshot.id}`}\n    >\n      <CardContent className=\"p-3\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <Badge \n            className={cn(\n              \"text-xs\",\n              getChangeTypeColor(snapshot.changeType).split(\" \").slice(0, 2).join(\" \")\n            )}\n            data-testid=\"snapshot-change-type\"\n          >\n            <span className=\"mr-1\">{getChangeTypeIcon(snapshot.changeType)}</span>\n            {snapshot.changeType}\n          </Badge>\n          <span className=\"text-xs text-muted-foreground\" data-testid=\"snapshot-time\">\n            {new Date(snapshot.recordedAt).toLocaleTimeString('en-US', { \n              hour: 'numeric',\n              minute: '2-digit',\n              hour12: true \n            })}\n          </span>\n        </div>\n        \n        <h4 className={cn(\n          \"font-medium mb-1\",\n          isDeleted ? \"text-muted-foreground line-through\" : \"text-foreground\"\n        )} data-testid=\"snapshot-task-title\">\n          {task.title}\n        </h4>\n        \n        {task.notes && (\n          <p className={cn(\n            \"text-sm mb-2\",\n            isDeleted ? \"text-muted-foreground line-through\" : \"text-muted-foreground\"\n          )} data-testid=\"snapshot-task-notes\">\n            {task.notes}\n          </p>\n        )}\n\n        {snapshot.changeType === \"Edited\" && (\n          <div className=\"text-sm space-y-1\" data-testid=\"snapshot-changes\">\n            <div className=\"text-accent\">\n              Status updated to: {task.status}\n            </div>\n          </div>\n        )}\n        \n        <div className=\"flex items-center space-x-3 mt-2 text-xs text-muted-foreground\">\n          <span data-testid=\"snapshot-assignee\">\n            Assignee: {task.responsibleMember?.user?.displayName || \"Unassigned\"}\n          </span>\n          <span data-testid=\"snapshot-priority\">\n            Priority: {task.priority}\n          </span>\n          <span data-testid=\"snapshot-status\">\n            Status: {task.status}\n          </span>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3318},"client/src/components/tasks/add-task-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTeam } from \"@/hooks/use-team\";\n\nconst createTaskSchema = z.object({\n  title: z.string().min(1, \"Title is required\").max(120, \"Title too long\"),\n  notes: z.string().optional(),\n  priority: z.enum([\"Low\", \"Medium\", \"High\"]).default(\"Medium\"),\n  status: z.enum([\"Open\", \"In-Progress\", \"Blocked\"]).default(\"Open\"),\n  responsibleMemberId: z.string().optional(),\n  dueDate: z.string().optional(),\n});\n\ntype CreateTaskForm = z.infer<typeof createTaskSchema>;\n\ninterface AddTaskModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function AddTaskModal({ open, onClose }: AddTaskModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const { selectedTeam } = useTeam();\n\n  const {\n    register,\n    handleSubmit,\n    setValue,\n    watch,\n    reset,\n    formState: { errors },\n  } = useForm<CreateTaskForm>({\n    resolver: zodResolver(createTaskSchema),\n    defaultValues: {\n      priority: \"Medium\",\n      status: \"Open\",\n    },\n  });\n\n  const { data: team } = useQuery({\n    queryKey: [\"/api/teams\", selectedTeam],\n    queryFn: async () => {\n      if (!selectedTeam) return null;\n      const response = await fetch(\"/api/teams\", { credentials: \"include\" });\n      if (response.ok) {\n        const teams = await response.json();\n        return teams.find((t: any) => t.id === selectedTeam);\n      }\n      return null;\n    },\n    enabled: !!selectedTeam && open,\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: CreateTaskForm) => {\n      const response = await apiRequest(\"POST\", \"/api/tasks\", {\n        ...data,\n        teamId: selectedTeam,\n        dueDate: data.dueDate ? new Date(data.dueDate).toISOString() : null,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Task created successfully\" });\n      reset();\n      onClose();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create task\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: CreateTaskForm) => {\n    if (!selectedTeam) {\n      toast({ title: \"Please select a team first\", variant: \"destructive\" });\n      return;\n    }\n    createTaskMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-md\" data-testid=\"add-task-modal\">\n        <DialogHeader>\n          <DialogTitle>Add New Task</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"title\">Title *</Label>\n            <Input\n              id=\"title\"\n              {...register(\"title\")}\n              placeholder=\"Enter task title...\"\n              className=\"mt-1\"\n              data-testid=\"input-task-title\"\n            />\n            {errors.title && (\n              <p className=\"text-sm text-destructive mt-1\">{errors.title.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"notes\">Notes</Label>\n            <Textarea\n              id=\"notes\"\n              {...register(\"notes\")}\n              placeholder=\"Add task details...\"\n              rows={3}\n              className=\"mt-1 resize-none\"\n              data-testid=\"input-task-notes\"\n            />\n          </div>\n          \n          <div className=\"grid grid-cols-2 gap-3\">\n            <div>\n              <Label htmlFor=\"priority\">Priority</Label>\n              <Select \n                defaultValue=\"Medium\" \n                onValueChange={(value: \"Low\" | \"Medium\" | \"High\") => setValue(\"priority\", value)}\n              >\n                <SelectTrigger className=\"mt-1\" data-testid=\"select-task-priority\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Low\">Low</SelectItem>\n                  <SelectItem value=\"Medium\">Medium</SelectItem>\n                  <SelectItem value=\"High\">High</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"status\">Status</Label>\n              <Select \n                defaultValue=\"Open\" \n                onValueChange={(value: \"Open\" | \"In-Progress\" | \"Blocked\") => setValue(\"status\", value)}\n              >\n                <SelectTrigger className=\"mt-1\" data-testid=\"select-task-status\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Open\">Open</SelectItem>\n                  <SelectItem value=\"In-Progress\">In Progress</SelectItem>\n                  <SelectItem value=\"Blocked\">Blocked</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"responsibleMember\">Responsible Member</Label>\n            <Select onValueChange={(value) => setValue(\"responsibleMemberId\", value || undefined)}>\n              <SelectTrigger className=\"mt-1\" data-testid=\"select-task-assignee\">\n                <SelectValue placeholder=\"Unassigned\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"\">Unassigned</SelectItem>\n                {team?.members?.map((member: any) => (\n                  <SelectItem key={member.id} value={member.id}>\n                    {member.user.displayName || member.user.email}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label htmlFor=\"dueDate\">Due Date</Label>\n            <Input\n              id=\"dueDate\"\n              type=\"date\"\n              {...register(\"dueDate\")}\n              className=\"mt-1\"\n              data-testid=\"input-task-due-date\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose} \n              className=\"flex-1\"\n              data-testid=\"button-cancel-task\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1\"\n              disabled={createTaskMutation.isPending}\n              data-testid=\"button-create-task\"\n            >\n              Create Task\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":7288},"client/src/components/tasks/date-card.tsx":{"content":"import { useState } from \"react\";\nimport { useTeam } from \"@/hooks/use-team\";\nimport { DateModal } from \"./date-modal\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nexport function DateCard() {\n  const { selectedTeam } = useTeam();\n  const [showDateModal, setShowDateModal] = useState(false);\n  \n  const today = new Date().toISOString().split('T')[0];\n  \n  const { data: minutes } = useQuery({\n    queryKey: [\"/api/minutes\", selectedTeam],\n    queryFn: async () => {\n      if (!selectedTeam) return null;\n      const response = await fetch(`/api/minutes?teamId=${selectedTeam}`, {\n        credentials: \"include\",\n      });\n      if (response.ok) {\n        const allMinutes = await response.json();\n        return allMinutes.find((m: any) => m.date === today);\n      }\n      return null;\n    },\n    enabled: !!selectedTeam,\n  });\n\n  const { data: team } = useQuery({\n    queryKey: [\"/api/teams\", selectedTeam],\n    queryFn: async () => {\n      if (!selectedTeam) return null;\n      const response = await fetch(`/api/teams`, { credentials: \"include\" });\n      if (response.ok) {\n        const teams = await response.json();\n        return teams.find((t: any) => t.id === selectedTeam);\n      }\n      return null;\n    },\n    enabled: !!selectedTeam,\n  });\n\n  if (!selectedTeam) {\n    return (\n      <Card className=\"border-b border-border rounded-none\">\n        <CardContent className=\"p-4\">\n          <div className=\"text-center text-muted-foreground\">\n            Please select a team to view meeting details\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const venue = minutes?.venue || team?.defaultVenue || \"No venue set\";\n  const presentCount = Array.isArray(minutes?.attendance) ? minutes.attendance.length : 0;\n  const totalCount = team?.members?.length || 0;\n\n  return (\n    <>\n      <Card className=\"border-b border-border rounded-none\" data-testid=\"date-card\">\n        <CardContent className=\"p-4\">\n          <button\n            onClick={() => setShowDateModal(true)}\n            className=\"w-full text-left bg-muted hover:bg-muted/80 rounded-lg p-4 transition-colors\"\n            data-testid=\"date-card-button\"\n          >\n            <div className=\"flex justify-between items-start\">\n              <div>\n                <h3 className=\"font-medium text-foreground\" data-testid=\"date-display\">\n                  {new Date().toLocaleDateString('en-US', { \n                    weekday: 'long',\n                    year: 'numeric',\n                    month: 'long',\n                    day: 'numeric'\n                  })}\n                </h3>\n                <p className=\"text-sm text-muted-foreground mt-1\" data-testid=\"venue-display\">\n                  {venue}\n                </p>\n              </div>\n              <div className=\"text-right\">\n                <span className=\"text-2xl font-bold text-primary\" data-testid=\"attendance-present\">\n                  {presentCount}\n                </span>\n                <span className=\"text-muted-foreground\">\n                  /<span data-testid=\"attendance-total\">{totalCount}</span>\n                </span>\n                <p className=\"text-xs text-muted-foreground mt-1\">Present</p>\n              </div>\n            </div>\n          </button>\n        </CardContent>\n      </Card>\n\n      <DateModal\n        open={showDateModal}\n        onClose={() => setShowDateModal(false)}\n        minutes={minutes}\n        team={team}\n      />\n    </>\n  );\n}\n","size_bytes":3498},"client/src/components/tasks/date-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface DateModalProps {\n  open: boolean;\n  onClose: () => void;\n  minutes?: any;\n  team?: any;\n}\n\nexport function DateModal({ open, onClose, minutes, team }: DateModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [date, setDate] = useState(\"\");\n  const [venue, setVenue] = useState(\"\");\n  const [attendance, setAttendance] = useState<string[]>([]);\n\n  useEffect(() => {\n    if (open) {\n      const today = new Date().toISOString().split('T')[0];\n      setDate(minutes?.date || today);\n      setVenue(minutes?.venue || team?.defaultVenue || \"\");\n      setAttendance(Array.isArray(minutes?.attendance) ? minutes.attendance : []);\n    }\n  }, [open, minutes, team]);\n\n  const updateMinutesMutation = useMutation({\n    mutationFn: async (data: any) => {\n      if (minutes?.id) {\n        const response = await apiRequest(\"PATCH\", `/api/minutes/${minutes.id}`, data);\n        return response.json();\n      } else {\n        const response = await apiRequest(\"POST\", \"/api/minutes\", {\n          ...data,\n          teamId: team?.id,\n        });\n        return response.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/minutes\"] });\n      toast({ title: \"Meeting details saved successfully\" });\n      onClose();\n    },\n    onError: () => {\n      toast({ title: \"Failed to save meeting details\", variant: \"destructive\" });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    updateMinutesMutation.mutate({\n      date,\n      venue,\n      attendance,\n    });\n  };\n\n  const handleAttendanceToggle = (memberId: string, checked: boolean) => {\n    setAttendance(prev => \n      checked \n        ? [...prev, memberId]\n        : prev.filter(id => id !== memberId)\n    );\n  };\n\n  const handleSelectAll = () => {\n    const allMemberIds = team?.members?.map((m: any) => m.id) || [];\n    const allSelected = allMemberIds.every((id: string) => attendance.includes(id));\n    setAttendance(allSelected ? [] : allMemberIds);\n  };\n\n  const getInitials = (name?: string) => {\n    if (!name) return \"U\";\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-md\" data-testid=\"date-modal\">\n        <DialogHeader>\n          <DialogTitle>Meeting Details</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"date\">Date</Label>\n            <Input\n              id=\"date\"\n              type=\"date\"\n              value={date}\n              onChange={(e) => setDate(e.target.value)}\n              className=\"mt-1\"\n              data-testid=\"input-meeting-date\"\n            />\n          </div>\n          \n          <div>\n            <Label htmlFor=\"venue\">Venue</Label>\n            <Input\n              id=\"venue\"\n              value={venue}\n              onChange={(e) => setVenue(e.target.value)}\n              placeholder=\"Enter venue...\"\n              className=\"mt-1\"\n              data-testid=\"input-meeting-venue\"\n            />\n          </div>\n          \n          <div>\n            <div className=\"flex items-center justify-between mb-3\">\n              <Label>Attendance</Label>\n              <Button \n                type=\"button\" \n                variant=\"link\" \n                size=\"sm\"\n                onClick={handleSelectAll}\n                className=\"h-auto p-0\"\n                data-testid=\"button-select-all\"\n              >\n                Select All\n              </Button>\n            </div>\n            \n            <div className=\"space-y-2 max-h-48 overflow-y-auto\" data-testid=\"attendance-list\">\n              {team?.members?.map((member: any) => (\n                <div key={member.id} className=\"flex items-center space-x-3 p-2 rounded-md hover:bg-muted\">\n                  <Checkbox\n                    checked={attendance.includes(member.id)}\n                    onCheckedChange={(checked) => handleAttendanceToggle(member.id, !!checked)}\n                    data-testid={`checkbox-member-${member.id}`}\n                  />\n                  <div className=\"flex items-center space-x-2 flex-1\">\n                    <Avatar className=\"w-6 h-6\">\n                      <AvatarImage src={member.user.photoUrl || undefined} />\n                      <AvatarFallback className=\"text-xs font-medium\">\n                        {getInitials(member.user.displayName)}\n                      </AvatarFallback>\n                    </Avatar>\n                    <span className=\"text-sm text-foreground\">\n                      {member.user.displayName || member.user.email}\n                    </span>\n                    {member.isCoordinator && (\n                      <span className=\"text-xs px-1 py-0.5 bg-accent text-accent-foreground rounded\">\n                        Coordinator\n                      </span>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose} \n              className=\"flex-1\"\n              data-testid=\"button-cancel-meeting\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1\"\n              disabled={updateMinutesMutation.isPending}\n              data-testid=\"button-save-meeting\"\n            >\n              Save\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":6340},"client/src/components/tasks/task-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { User, Calendar, Clock } from \"lucide-react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface TaskCardProps {\n  task: any;\n  canEdit: boolean;\n}\n\nexport function TaskCard({ task, canEdit }: TaskCardProps) {\n  const { user, role } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isEditing, setIsEditing] = useState<string | null>(null);\n\n  const updateTaskMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/tasks/${id}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/tasks\"] });\n      toast({ title: \"Task updated successfully\" });\n      setIsEditing(null);\n    },\n    onError: () => {\n      toast({ title: \"Failed to update task\", variant: \"destructive\" });\n    },\n  });\n\n  const handleFieldUpdate = (field: string, value: any) => {\n    updateTaskMutation.mutate({ id: task.id, updates: { [field]: value } });\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent, field: string) => {\n    if (e.key === \"Enter\" && !e.shiftKey) {\n      e.preventDefault();\n      setIsEditing(null);\n    }\n    if (e.key === \"Escape\") {\n      setIsEditing(null);\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Open\": return \"bg-primary text-primary-foreground\";\n      case \"In-Progress\": return \"bg-accent text-accent-foreground\";\n      case \"Blocked\": return \"bg-destructive text-destructive-foreground\";\n      case \"Done\": return \"bg-secondary text-secondary-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \"High\": return \"border-l-destructive\";\n      case \"Medium\": return \"border-l-accent\";\n      case \"Low\": return \"border-l-secondary\";\n      default: return \"border-l-muted\";\n    }\n  };\n\n  const canEditField = (field: string) => {\n    if (role === \"Admin\" || role === \"Superadmin\") return true;\n    if (role === \"Coordinator\") return canEdit;\n    if (role === \"Member\") {\n      // Members can only edit status and notes on their own tasks\n      return (field === \"status\" || field === \"notes\") && \n             task.responsibleMember?.userId === user?.id;\n    }\n    return false;\n  };\n\n  return (\n    <Card \n      className={cn(\n        \"task-card transition-all duration-200 border-l-4\",\n        getPriorityColor(task.priority)\n      )}\n      data-testid={`task-card-${task.id}`}\n    >\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-3\">\n          <div className=\"flex-1\">\n            {isEditing === \"title\" && canEditField(\"title\") ? (\n              <Input\n                defaultValue={task.title}\n                onBlur={(e) => handleFieldUpdate(\"title\", e.target.value)}\n                onKeyDown={(e) => handleKeyDown(e, \"title\")}\n                className=\"mb-1 font-medium\"\n                autoFocus\n                data-testid=\"task-title-input\"\n              />\n            ) : (\n              <h3 \n                className=\"font-medium text-foreground mb-1 cursor-pointer hover:bg-muted/50 rounded px-1 -mx-1\"\n                onClick={() => canEditField(\"title\") && setIsEditing(\"title\")}\n                data-testid=\"task-title\"\n              >\n                {task.title}\n              </h3>\n            )}\n            \n            {isEditing === \"notes\" && canEditField(\"notes\") ? (\n              <Textarea\n                defaultValue={task.notes || \"\"}\n                onBlur={(e) => handleFieldUpdate(\"notes\", e.target.value)}\n                onKeyDown={(e) => handleKeyDown(e, \"notes\")}\n                className=\"text-sm resize-none\"\n                rows={2}\n                autoFocus\n                data-testid=\"task-notes-input\"\n              />\n            ) : (\n              <p \n                className=\"text-sm text-muted-foreground cursor-pointer hover:bg-muted/50 rounded px-1 -mx-1 min-h-[20px]\"\n                onClick={() => canEditField(\"notes\") && setIsEditing(\"notes\")}\n                data-testid=\"task-notes\"\n              >\n                {task.notes || \"No description\"}\n              </p>\n            )}\n          </div>\n          \n          {isEditing === \"status\" && canEditField(\"status\") ? (\n            <Select defaultValue={task.status} onValueChange={(value) => handleFieldUpdate(\"status\", value)}>\n              <SelectTrigger className=\"ml-3 w-auto\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Open\">Open</SelectItem>\n                <SelectItem value=\"In-Progress\">In Progress</SelectItem>\n                <SelectItem value=\"Blocked\">Blocked</SelectItem>\n                <SelectItem value=\"Done\">Done</SelectItem>\n                <SelectItem value=\"Canceled\">Canceled</SelectItem>\n              </SelectContent>\n            </Select>\n          ) : (\n            <Badge\n              className={cn(\"ml-3 cursor-pointer\", getStatusColor(task.status))}\n              onClick={() => canEditField(\"status\") && setIsEditing(\"status\")}\n              data-testid=\"task-status\"\n            >\n              {task.status}\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between text-sm\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center text-muted-foreground\">\n              <User className=\"w-4 h-4 mr-1\" />\n              <span data-testid=\"task-assignee\">\n                {task.responsibleMember?.user?.displayName || \"Unassigned\"}\n              </span>\n            </div>\n            {task.dueDate && (\n              <div className=\"flex items-center text-muted-foreground\">\n                <Calendar className=\"w-4 h-4 mr-1\" />\n                <span data-testid=\"task-due-date\">\n                  {new Date(task.dueDate).toLocaleDateString('en-US', { \n                    month: 'short', \n                    day: 'numeric' \n                  })}\n                </span>\n              </div>\n            )}\n          </div>\n          <Badge variant=\"outline\" className={cn(\n            task.priority === \"High\" && \"text-destructive border-destructive\",\n            task.priority === \"Medium\" && \"text-accent border-accent\",\n            task.priority === \"Low\" && \"text-secondary border-secondary\"\n          )} data-testid=\"task-priority\">\n            {task.priority}\n          </Badge>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7170},"client/src/components/teams/add-team-modal.tsx":{"content":"import {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst createTeamSchema = z.object({\n  name: z.string().min(1, \"Team name is required\").max(50, \"Name too long\"),\n  defaultVenue: z.string().optional(),\n});\n\ntype CreateTeamForm = z.infer<typeof createTeamSchema>;\n\ninterface AddTeamModalProps {\n  open: boolean;\n  onClose: () => void;\n}\n\nexport function AddTeamModal({ open, onClose }: AddTeamModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const {\n    register,\n    handleSubmit,\n    reset,\n    formState: { errors },\n  } = useForm<CreateTeamForm>({\n    resolver: zodResolver(createTeamSchema),\n  });\n\n  const createTeamMutation = useMutation({\n    mutationFn: async (data: CreateTeamForm) => {\n      const response = await apiRequest(\"POST\", \"/api/teams\", data);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      toast({ title: \"Team created successfully\" });\n      reset();\n      onClose();\n    },\n    onError: () => {\n      toast({ title: \"Failed to create team\", variant: \"destructive\" });\n    },\n  });\n\n  const onSubmit = (data: CreateTeamForm) => {\n    createTeamMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"w-full max-w-md\" data-testid=\"add-team-modal\">\n        <DialogHeader>\n          <DialogTitle>Add New Team</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div>\n            <Label htmlFor=\"name\">Team Name *</Label>\n            <Input\n              id=\"name\"\n              {...register(\"name\")}\n              placeholder=\"Enter team name...\"\n              className=\"mt-1\"\n              data-testid=\"input-team-name\"\n            />\n            {errors.name && (\n              <p className=\"text-sm text-destructive mt-1\">{errors.name.message}</p>\n            )}\n          </div>\n          \n          <div>\n            <Label htmlFor=\"defaultVenue\">Default Venue</Label>\n            <Input\n              id=\"defaultVenue\"\n              {...register(\"defaultVenue\")}\n              placeholder=\"Enter default meeting venue...\"\n              className=\"mt-1\"\n              data-testid=\"input-team-venue\"\n            />\n          </div>\n          \n          <div className=\"flex space-x-3 pt-4\">\n            <Button \n              type=\"button\" \n              variant=\"outline\" \n              onClick={onClose} \n              className=\"flex-1\"\n              data-testid=\"button-cancel-team\"\n            >\n              Cancel\n            </Button>\n            <Button \n              type=\"submit\" \n              className=\"flex-1\"\n              disabled={createTeamMutation.isPending}\n              data-testid=\"button-create-team\"\n            >\n              Create Team\n            </Button>\n          </div>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3438},"client/src/components/teams/team-card.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Crown, Mail, UserPlus, UserMinus } from \"lucide-react\";\n\ninterface TeamCardProps {\n  team: any;\n}\n\nexport function TeamCard({ team }: TeamCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [newMemberEmail, setNewMemberEmail] = useState(\"\");\n\n  const addMemberMutation = useMutation({\n    mutationFn: async ({ email, teamId }: { email: string; teamId: string }) => {\n      // First find or create user\n      const usersResponse = await fetch(\"/api/users\", { credentials: \"include\" });\n      const users = await usersResponse.json();\n      let user = users.find((u: any) => u.email === email);\n      \n      if (!user) {\n        toast({ title: \"User not found. They need to sign in first.\", variant: \"destructive\" });\n        return;\n      }\n\n      const response = await apiRequest(\"POST\", \"/api/team-members\", {\n        teamId,\n        userId: user.id,\n        isCoordinator: false,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      toast({ title: \"Member added successfully\" });\n      setNewMemberEmail(\"\");\n    },\n    onError: () => {\n      toast({ title: \"Failed to add member\", variant: \"destructive\" });\n    },\n  });\n\n  const updateMemberMutation = useMutation({\n    mutationFn: async ({ memberId, updates }: { memberId: string; updates: any }) => {\n      const response = await apiRequest(\"PATCH\", `/api/team-members/${memberId}`, updates);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      toast({ title: \"Member updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update member\", variant: \"destructive\" });\n    },\n  });\n\n  const removeMemberMutation = useMutation({\n    mutationFn: async (memberId: string) => {\n      const response = await apiRequest(\"DELETE\", `/api/team-members/${memberId}`);\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/teams\"] });\n      toast({ title: \"Member removed successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to remove member\", variant: \"destructive\" });\n    },\n  });\n\n  const handleAddMember = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (newMemberEmail && team.id) {\n      addMemberMutation.mutate({ email: newMemberEmail, teamId: team.id });\n    }\n  };\n\n  const toggleCoordinator = (member: any) => {\n    const coordinatorCount = team.coordinators?.length || 0;\n    \n    if (member.isCoordinator && coordinatorCount <= 1) {\n      toast({ \n        title: \"Cannot remove last coordinator\", \n        description: \"Each team must have at least one coordinator.\",\n        variant: \"destructive\" \n      });\n      return;\n    }\n\n    updateMemberMutation.mutate({\n      memberId: member.id,\n      updates: { isCoordinator: !member.isCoordinator }\n    });\n  };\n\n  const getInitials = (name?: string) => {\n    if (!name) return \"U\";\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  return (\n    <Card data-testid={`team-card-${team.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-4\">\n          <div>\n            <h3 className=\"font-semibold text-foreground text-lg\" data-testid=\"team-name\">\n              {team.name}\n            </h3>\n            <p className=\"text-sm text-muted-foreground\" data-testid=\"team-venue\">\n              {team.defaultVenue || \"No default venue\"}\n            </p>\n          </div>\n          <div className=\"text-right text-sm text-muted-foreground\">\n            <div data-testid=\"team-member-count\">\n              <span>{team.members?.length || 0}</span> members\n            </div>\n            <div data-testid=\"team-coordinator-count\">\n              <span>{team.coordinators?.length || 0}</span> coordinators\n            </div>\n          </div>\n        </div>\n        \n        {/* Members List */}\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-foreground text-sm\">Members</h4>\n          <div className=\"grid grid-cols-1 gap-2\" data-testid=\"team-members-list\">\n            {team.members?.map((member: any) => (\n              <div \n                key={member.id} \n                className=\"flex items-center justify-between p-2 bg-muted rounded\"\n                data-testid={`team-member-${member.id}`}\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <Avatar className=\"w-8 h-8\">\n                    <AvatarImage src={member.user.photoUrl || undefined} />\n                    <AvatarFallback className=\"text-sm font-medium\">\n                      {getInitials(member.user.displayName)}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div>\n                    <p className=\"font-medium text-foreground text-sm\">\n                      {member.user.displayName || \"Unnamed User\"}\n                    </p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      {member.user.email}\n                    </p>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {member.isCoordinator && (\n                    <Badge className=\"text-xs bg-accent text-accent-foreground\">\n                      <Crown className=\"w-3 h-3 mr-1\" />\n                      Coordinator\n                    </Badge>\n                  )}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => toggleCoordinator(member)}\n                    className=\"h-8 w-8 p-0\"\n                    data-testid={`button-toggle-coordinator-${member.id}`}\n                  >\n                    {member.isCoordinator ? <UserMinus className=\"w-4 h-4\" /> : <UserPlus className=\"w-4 h-4\" />}\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n        \n        {/* Add Member */}\n        <div className=\"mt-4 pt-4 border-t border-border\">\n          <form onSubmit={handleAddMember} className=\"flex space-x-2\">\n            <Input\n              type=\"email\"\n              placeholder=\"Enter email address...\"\n              value={newMemberEmail}\n              onChange={(e) => setNewMemberEmail(e.target.value)}\n              className=\"flex-1\"\n              data-testid=\"input-add-member-email\"\n            />\n            <Button \n              type=\"submit\" \n              size=\"sm\"\n              disabled={addMemberMutation.isPending || !newMemberEmail}\n              data-testid=\"button-add-member\"\n            >\n              <Mail className=\"w-4 h-4 mr-1\" />\n              Add\n            </Button>\n          </form>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7419},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/fab.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"./button\";\n\ninterface FABProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  children: React.ReactNode;\n}\n\nexport function FAB({ className, children, ...props }: FABProps) {\n  return (\n    <Button\n      className={cn(\n        \"fixed bottom-20 right-4 h-14 w-14 rounded-full shadow-lg hover:shadow-xl transition-shadow z-50\",\n        \"md:bottom-24 md:right-6\",\n        className\n      )}\n      size=\"icon\"\n      {...props}\n      data-testid=\"fab-button\"\n    >\n      {children}\n    </Button>\n  );\n}\n","size_bytes":599},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/users/user-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Button } from \"@/components/ui/button\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Crown, Shield, User } from \"lucide-react\";\nimport { useState } from \"react\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\n\ninterface UserCardProps {\n  user: any;\n}\n\nexport function UserCard({ user }: UserCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCoordinatorTeams, setShowCoordinatorTeams] = useState(false);\n\n  const { data: coordinatorTeams = [] } = useQuery({\n    queryKey: [\"/api/teams\", \"coordinator\", user.id],\n    queryFn: async () => {\n      const response = await fetch(\"/api/teams\", { credentials: \"include\" });\n      if (response.ok) {\n        const allTeams = await response.json();\n        return allTeams.filter((team: any) => \n          team.coordinators?.some((coord: any) => coord.userId === user.id)\n        );\n      }\n      return [];\n    },\n    enabled: showCoordinatorTeams,\n  });\n\n  const updateAdminMutation = useMutation({\n    mutationFn: async ({ userId, isAdmin }: { userId: string; isAdmin: boolean }) => {\n      const response = await apiRequest(\"PATCH\", `/api/users/${userId}/admin`, { isAdmin });\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({ title: \"Admin status updated successfully\" });\n    },\n    onError: () => {\n      toast({ title: \"Failed to update admin status\", variant: \"destructive\" });\n    },\n  });\n\n  const toggleAdmin = () => {\n    if (user.role === \"Superadmin\") return; // Cannot toggle superadmin\n    \n    updateAdminMutation.mutate({\n      userId: user.id,\n      isAdmin: !user.isAdmin,\n    });\n  };\n\n  const getInitials = (name?: string) => {\n    if (!name) return user.email?.[0]?.toUpperCase() || \"U\";\n    return name\n      .split(\" \")\n      .map(n => n[0])\n      .join(\"\")\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role) {\n      case \"Superadmin\": return \"bg-destructive text-destructive-foreground\";\n      case \"Admin\": return \"bg-primary text-primary-foreground\";\n      case \"Coordinator\": return \"bg-accent text-accent-foreground\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case \"Superadmin\": return <Shield className=\"w-3 h-3 mr-1\" />;\n      case \"Admin\": return <Shield className=\"w-3 h-3 mr-1\" />;\n      case \"Coordinator\": return <Crown className=\"w-3 h-3 mr-1\" />;\n      default: return <User className=\"w-3 h-3 mr-1\" />;\n    }\n  };\n\n  const coordinatorCount = coordinatorTeams.length;\n  const isSuperadmin = user.role === \"Superadmin\";\n\n  return (\n    <Card data-testid={`user-card-${user.id}`}>\n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <Avatar className=\"w-10 h-10\">\n              <AvatarImage src={user.photoUrl || undefined} />\n              <AvatarFallback className=\"font-medium\">\n                {getInitials(user.displayName)}\n              </AvatarFallback>\n            </Avatar>\n            <div>\n              <h3 className=\"font-medium text-foreground\" data-testid=\"user-name\">\n                {user.displayName || \"Unnamed User\"}\n              </h3>\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"user-email\">\n                {user.email}\n              </p>\n              <div className=\"flex space-x-1 mt-1\">\n                <Badge \n                  className={`text-xs ${getRoleColor(user.role)}`}\n                  data-testid=\"user-role\"\n                >\n                  {getRoleIcon(user.role)}\n                  {user.role}\n                </Badge>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-3\">\n            <div className=\"text-right text-sm\">\n              <p className=\"text-muted-foreground\">Coordinates</p>\n              {coordinatorCount > 0 ? (\n                <Popover>\n                  <PopoverTrigger asChild>\n                    <Button \n                      variant=\"link\" \n                      className=\"h-auto p-0 text-primary hover:underline\"\n                      onClick={() => setShowCoordinatorTeams(true)}\n                      data-testid=\"coordinator-teams-trigger\"\n                    >\n                      {coordinatorCount} team{coordinatorCount !== 1 ? 's' : ''}\n                    </Button>\n                  </PopoverTrigger>\n                  <PopoverContent className=\"w-64\" data-testid=\"coordinator-teams-popover\">\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-semibold text-sm\">Coordinator of:</h4>\n                      {coordinatorTeams.map((team: any) => (\n                        <div key={team.id} className=\"text-sm text-muted-foreground\">\n                          {team.name}\n                        </div>\n                      ))}\n                    </div>\n                  </PopoverContent>\n                </Popover>\n              ) : (\n                <span className=\"text-muted-foreground\" data-testid=\"no-coordinator-teams\">\n                  0 teams\n                </span>\n              )}\n            </div>\n            \n            {/* Admin Toggle */}\n            <div className=\"flex items-center space-x-2\">\n              <span className=\"text-sm text-muted-foreground\">Admin</span>\n              <Switch\n                checked={user.isAdmin}\n                onCheckedChange={toggleAdmin}\n                disabled={isSuperadmin || updateAdminMutation.isPending}\n                className={isSuperadmin ? \"opacity-50\" : \"\"}\n                data-testid=\"admin-toggle\"\n              />\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":6304},"client/src/pages/auth/sign-in.tsx":{"content":"import { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { signInWithGoogle, handleRedirectResult } from \"@/lib/auth\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { LogIn, Loader2 } from \"lucide-react\";\n\nexport default function SignIn() {\n  const { setUser, loading } = useAuth();\n\n  useEffect(() => {\n    const checkRedirectResult = async () => {\n      try {\n        const result = await handleRedirectResult();\n        if (result?.user) {\n          setUser(result.user, result.role);\n        }\n      } catch (error) {\n        console.error(\"Failed to handle redirect result:\", error);\n      }\n    };\n\n    checkRedirectResult();\n  }, [setUser]);\n\n  const handleSignIn = async () => {\n    try {\n      await signInWithGoogle();\n    } catch (error) {\n      console.error(\"Sign in failed:\", error);\n    }\n  };\n\n  if (loading) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\" data-testid=\"sign-in-page\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-2xl font-bold text-foreground\">\n            Welcome to TSR Planner\n          </CardTitle>\n          <p className=\"text-muted-foreground\">\n            Sign in to manage your team tasks and meetings\n          </p>\n        </CardHeader>\n        <CardContent>\n          <Button\n            onClick={handleSignIn}\n            className=\"w-full\"\n            size=\"lg\"\n            data-testid=\"button-google-signin\"\n          >\n            <LogIn className=\"w-5 h-5 mr-2\" />\n            Sign in with Google\n          </Button>\n          \n          <div className=\"mt-6 text-center text-sm text-muted-foreground\">\n            <p>\n              By signing in, you agree to our terms of service and privacy policy.\n            </p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":2176}},"version":1}